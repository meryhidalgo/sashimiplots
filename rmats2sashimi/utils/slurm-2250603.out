RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: No changes to src/MISO/test.py
RefactoringTool: Refactored src/MISO/misopy/Gene.py
RefactoringTool: No changes to src/MISO/misopy/__init__.py
RefactoringTool: Refactored src/MISO/misopy/as_events.py
RefactoringTool: Refactored src/MISO/misopy/cluster_utils.py
RefactoringTool: Refactored src/MISO/misopy/compare_miso.py
RefactoringTool: No changes to src/MISO/misopy/credible_intervals.py
RefactoringTool: Refactored src/MISO/misopy/exon_utils.py
RefactoringTool: Refactored src/MISO/misopy/filter_events.py
RefactoringTool: Can't parse src/MISO/misopy/gff_utils.py: ParseError: bad input: type=22, value='=', context=('', (304, 70))
RefactoringTool: Refactored src/MISO/misopy/hypothesis_test.py
RefactoringTool: Refactored src/MISO/misopy/index_gff.py
RefactoringTool: No changes to src/MISO/misopy/json_utils.py
RefactoringTool: Refactored src/MISO/misopy/kde_subclass.py
RefactoringTool: Refactored src/MISO/misopy/legacy_test_pysplicing.py
RefactoringTool: Refactored src/MISO/misopy/misc_utils.py
RefactoringTool: Refactored src/MISO/misopy/miso.py
RefactoringTool: Refactored src/MISO/misopy/miso_db.py
RefactoringTool: Refactored src/MISO/misopy/miso_pack.py
RefactoringTool: Refactored src/MISO/misopy/miso_sampler.py
RefactoringTool: Refactored src/MISO/misopy/miso_utils.py
RefactoringTool: Refactored src/MISO/misopy/miso_zip.py
RefactoringTool: Refactored src/MISO/misopy/module_availability.py
RefactoringTool: Refactored src/MISO/misopy/parse_csv.py
RefactoringTool: Refactored src/MISO/misopy/parse_gene.py
RefactoringTool: Refactored src/MISO/misopy/pe_utils.py
RefactoringTool: No changes to src/MISO/misopy/pickle_utils.py
RefactoringTool: No changes to src/MISO/misopy/py2c_gene.py
RefactoringTool: Refactored src/MISO/misopy/read_simulator.py
RefactoringTool: No changes to src/MISO/misopy/reads_utils.py
RefactoringTool: Refactored src/MISO/misopy/run_events_analysis.py
RefactoringTool: Refactored src/MISO/misopy/run_miso.py
RefactoringTool: Refactored src/MISO/misopy/sam_rpkm.py
RefactoringTool: Refactored src/MISO/misopy/sam_to_bam.py
RefactoringTool: Refactored src/MISO/misopy/sam_utils.py
RefactoringTool: Refactored src/MISO/misopy/samples_utils.py
RefactoringTool: Refactored src/MISO/misopy/settings.py
RefactoringTool: Refactored src/MISO/misopy/summarize_miso.py
RefactoringTool: Refactored src/MISO/misopy/test_cluster.py
RefactoringTool: Refactored src/MISO/misopy/test_miso.py
RefactoringTool: Refactored src/MISO/misopy/sashimi_plot/Sashimi.py
RefactoringTool: No changes to src/MISO/misopy/sashimi_plot/plot.py
RefactoringTool: Refactored src/MISO/misopy/sashimi_plot/sashimi_plot.py
RefactoringTool: Refactored src/MISO/misopy/sashimi_plot/plot_utils/plot_gene.py
RefactoringTool: Refactored src/MISO/misopy/sashimi_plot/plot_utils/plot_settings.py
RefactoringTool: Refactored src/MISO/misopy/sashimi_plot/plot_utils/plotting.py
RefactoringTool: Refactored src/MISO/misopy/sashimi_plot/plot_utils/samples_plotter.py
RefactoringTool: Can't parse src/rmats2sashimiplot/rmats2sashimiplot.py: ParseError: bad input: type=22, value='=', context=('', (280, 39))
RefactoringTool: Files that were modified:
RefactoringTool: src/MISO/test.py
RefactoringTool: src/MISO/misopy/Gene.py
RefactoringTool: src/MISO/misopy/__init__.py
RefactoringTool: src/MISO/misopy/as_events.py
RefactoringTool: src/MISO/misopy/cluster_utils.py
RefactoringTool: src/MISO/misopy/compare_miso.py
RefactoringTool: src/MISO/misopy/credible_intervals.py
RefactoringTool: src/MISO/misopy/exon_utils.py
RefactoringTool: src/MISO/misopy/filter_events.py
RefactoringTool: src/MISO/misopy/hypothesis_test.py
RefactoringTool: src/MISO/misopy/index_gff.py
RefactoringTool: src/MISO/misopy/json_utils.py
RefactoringTool: src/MISO/misopy/kde_subclass.py
RefactoringTool: src/MISO/misopy/legacy_test_pysplicing.py
RefactoringTool: src/MISO/misopy/misc_utils.py
RefactoringTool: src/MISO/misopy/miso.py
RefactoringTool: src/MISO/misopy/miso_db.py
RefactoringTool: src/MISO/misopy/miso_pack.py
RefactoringTool: src/MISO/misopy/miso_sampler.py
RefactoringTool: src/MISO/misopy/miso_utils.py
RefactoringTool: src/MISO/misopy/miso_zip.py
RefactoringTool: src/MISO/misopy/module_availability.py
RefactoringTool: src/MISO/misopy/parse_csv.py
RefactoringTool: src/MISO/misopy/parse_gene.py
RefactoringTool: src/MISO/misopy/pe_utils.py
RefactoringTool: src/MISO/misopy/pickle_utils.py
RefactoringTool: src/MISO/misopy/py2c_gene.py
RefactoringTool: src/MISO/misopy/read_simulator.py
RefactoringTool: src/MISO/misopy/reads_utils.py
RefactoringTool: src/MISO/misopy/run_events_analysis.py
RefactoringTool: src/MISO/misopy/run_miso.py
RefactoringTool: src/MISO/misopy/sam_rpkm.py
RefactoringTool: src/MISO/misopy/sam_to_bam.py
RefactoringTool: src/MISO/misopy/sam_utils.py
RefactoringTool: src/MISO/misopy/samples_utils.py
RefactoringTool: src/MISO/misopy/settings.py
RefactoringTool: src/MISO/misopy/summarize_miso.py
RefactoringTool: src/MISO/misopy/test_cluster.py
RefactoringTool: src/MISO/misopy/test_miso.py
RefactoringTool: src/MISO/misopy/sashimi_plot/Sashimi.py
RefactoringTool: src/MISO/misopy/sashimi_plot/plot.py
RefactoringTool: src/MISO/misopy/sashimi_plot/sashimi_plot.py
RefactoringTool: src/MISO/misopy/sashimi_plot/plot_utils/plot_gene.py
RefactoringTool: src/MISO/misopy/sashimi_plot/plot_utils/plot_settings.py
RefactoringTool: src/MISO/misopy/sashimi_plot/plot_utils/plotting.py
RefactoringTool: src/MISO/misopy/sashimi_plot/plot_utils/samples_plotter.py
RefactoringTool: There were 2 errors:
RefactoringTool: Can't parse src/MISO/misopy/gff_utils.py: ParseError: bad input: type=22, value='=', context=('', (304, 70))
RefactoringTool: Can't parse src/rmats2sashimiplot/rmats2sashimiplot.py: ParseError: bad input: type=22, value='=', context=('', (280, 39))
--- src/MISO/misopy/Gene.py	(original)
+++ src/MISO/misopy/Gene.py	(refactored)
@@ -843,20 +843,20 @@
 
 
 def pretty(d, indent=0):
-    for key, value in d.items():
-        print('  ' * indent + str(key))
+    for key, value in list(d.items()):
+        print(('  ' * indent + str(key)))
         if isinstance(value, dict):
             pretty(value, indent+1)
         else:
-            print('  ' * (indent+1) + str(value))
+            print(('  ' * (indent+1) + str(value)))
 
 
 def printTree(tree, depth = 0):
     if tree == None or not type(tree) == dict:
-        print("\t" * depth, tree)
+        print(("\t" * depth, tree))
     else:
         for key, val in list(tree.items()):
-            print("\t" * depth, key)
+            print(("\t" * depth, key))
             printTree(val, depth+1)
 
 
@@ -889,7 +889,7 @@
 
         if gene_label not in gene_hierarchy:
             if not suppress_warnings:
-                print("Skipping gene %s..." %(gene_label))
+                print(("Skipping gene %s..." %(gene_label)))
             continue
 
         gene_hierarchy[gene_label]['gene'] = gene
@@ -900,19 +900,19 @@
                                               gene_records)
         if gene_obj == None:
             if not suppress_warnings:
-                print("Cannot make gene out of %s" %(gene_label))
+                print(("Cannot make gene out of %s" %(gene_label)))
             continue
         gff_genes[gene.get_id()] = {'gene_object': gene_obj,
                                     'hierarchy': gene_hierarchy}
 
         if (num_genes % 5000) == 0:
             if not suppress_warnings:
-                print("Through %d genes..." %(num_genes))
+                print(("Through %d genes..." %(num_genes)))
         num_genes += 1
 
     num_genes = len(gff_genes)
     if not suppress_warnings:
-        print("Loaded %d genes" %(num_genes))
+        print(("Loaded %d genes" %(num_genes)))
 
     return gff_genes
 
@@ -955,14 +955,14 @@
         exons = []
 
         if len(transcript_exons) == 0:
-            print("%s has no exons" %(transcript_id))
+            print(("%s has no exons" %(transcript_id)))
             continue
 
         # Record how many transcripts we have with exons children
         # (i.e., usable transcripts)
         num_transcripts_with_exons += 1
 
-        for exon_id, exon_info in transcript_exons.items():
+        for exon_id, exon_info in list(transcript_exons.items()):
             exon_rec = exon_info['record']
 
             exon = Exon(exon_rec.start, exon_rec.end, from_gff_record={'record':
--- src/MISO/misopy/as_events.py	(original)
+++ src/MISO/misopy/as_events.py	(refactored)
@@ -147,7 +147,7 @@
                               proximal_distal_sum=20):
         print("Filtering AFE/ALE events...")
         filtered_events = {}
-        for event_name, event in self.events.items():
+        for event_name, event in list(self.events.items()):
             num_proximal = event.num_proximal_body + event.num_proximal_jxns
             num_distal = event.num_distal_body + event.num_distal_jxns
             if (num_proximal >= atleast_proximal and num_distal >= atleast_distal) \
@@ -167,7 +167,7 @@
                 atleast_core = settings['utr_filter'][2]
 
         filtered_events = {}
-        for event_name, event in self.events.items():
+        for event_name, event in list(self.events.items()):
             if (event.num_core >= atleast_core and event.num_ext >= atleast_ext) and \
                (event.num_core + event.num_ext) >= core_ext_sum:
                 filtered_events[event_name] = event
@@ -179,12 +179,12 @@
                          atleast_num_common=1):
         print("Filtering RI events...")
         print("Filter: ")
-        print("  - ri_plus_ne >= %d" %(atleast_ri_plus_ne))
-        print("  - ne >= %d" %(atleast_ne))
-        print("  - num_common >= %d" %(atleast_num_common))
+        print(("  - ri_plus_ne >= %d" %(atleast_ri_plus_ne)))
+        print(("  - ne >= %d" %(atleast_ne)))
+        print(("  - num_common >= %d" %(atleast_num_common)))
 
         filtered_events = {}
-        for event_name, event in self.events.items():
+        for event_name, event in list(self.events.items()):
             if ((event.num_inc + event.num_exc) >= atleast_ri_plus_ne \
                 and (event.num_exc >= atleast_ne) and \
                 (event.num_common >= atleast_num_common)):
@@ -203,7 +203,7 @@
                 atleast_num_common = settings['se_filter'][2]
 
         filtered_events = {}
-        for event_name, event in self.events.items():
+        for event_name, event in list(self.events.items()):
             if ((event.num_inc + event.num_exc) >= atleast_ni_plus_ne) and (event.num_exc >= atleast_ne) and \
                    (event.num_common >= atleast_num_common):
                 filtered_events[event_name] = event
@@ -216,18 +216,18 @@
         t1 = time.time()
         self.events = json_utils.json_load_file(json_filename)
         t2 = time.time()
-        print("Loading from JSON file took %.2f seconds." %(float(t2 - t1)))
+        print(("Loading from JSON file took %.2f seconds." %(float(t2 - t1))))
         self.num_events = len(self.events)
 
     def load_from_pickle_file(self, pickle_filename):
-        print("Called on: ", pickle_filename)
+        print(("Called on: ", pickle_filename))
         # clear currently loaded events, if any
         self.clear_events()
         # Modify events directly
         t1 = time.time()
         self.events = pickle_utils.load_pickled_file(pickle_filename)
         t2 = time.time()
-        print("Loading from Pickle file took %.2f seconds." %(float(t2 - t1)))
+        print(("Loading from Pickle file took %.2f seconds." %(float(t2 - t1))))
         self.num_events = len(self.events)
 
     def loaded_events_to_genes(self, single_event_name=None,
@@ -265,7 +265,7 @@
                 raise Exception("Unsupported event type: %s" %(self.event_type))
             events_to_genes[event_name] = gene
         t2 = time.time()
-        print("Parsing of events to genes took %.2f seconds." %(t2 - t1))
+        print(("Parsing of events to genes took %.2f seconds." %(t2 - t1)))
         return events_to_genes
 
     def output_file(self, results_output_dir, sample_label, method="pickle"):
@@ -280,7 +280,7 @@
         """
         Output as json.
         """
-        print("Serializing a total of %d events by JSON." %(len(self.events)))
+        print(("Serializing a total of %d events by JSON." %(len(self.events))))
         json_output_dir = os.path.join(results_output_dir, 'json')
         if not os.path.isdir(json_output_dir):
             os.mkdir(json_output_dir)
@@ -289,7 +289,7 @@
         return json_events_filename
 
     def output_pickle_file(self, results_output_dir, sample_label):
-        print("Serializing a total of %d events by Pickle." %(len(self.events)))
+        print(("Serializing a total of %d events by Pickle." %(len(self.events))))
         pickle_output_dir = os.path.join(results_output_dir, 'pickle')
         if not os.path.isdir(pickle_output_dir):
             os.mkdir(pickle_output_dir)
@@ -372,8 +372,8 @@
     assert((event_type == 'AFE') or (event_type == 'ALE')), \
                        "Error: Event type must be AFE/ALE"
 
-    print("Loading events from %s (event type: %s)" %(events_info_filename,
-                                                      event_type))
+    print(("Loading events from %s (event type: %s)" %(events_info_filename,
+                                                      event_type)))
     events_info_file = open(events_info_filename, 'r')
     events_info = csv.reader(events_info_file,
                              delimiter=delimiter)
--- src/MISO/misopy/cluster_utils.py	(original)
+++ src/MISO/misopy/cluster_utils.py	(refactored)
@@ -113,8 +113,8 @@
     if queue_type == None:
         print("  - queue: unspecified")
     else:
-        print("  - queue: %s, using queue name %s" %(queue_type,
-                                                     queue_name))
+        print(("  - queue: %s, using queue name %s" %(queue_type,
+                                                     queue_name)))
     cs = open(cluster_script, 'w')
     cs.write("#!/bin/sh" + "\n")
     cs.write("#$ -N %s\n" %(job_name))
@@ -162,7 +162,7 @@
                    queue_type=None,
                    cmd_name="qsub",
                    settings_fname=None):
-    print("Submitting job: %s" %(job_name))
+    print(("Submitting job: %s" %(job_name)))
     queue_name = None
 
     # Load command name from settings file
@@ -175,17 +175,17 @@
     elif queue_type == "short":
         queue_name = Settings.get_short_queue_name()
     else:
-        print("Warning: Unknown queue type: %s" %(queue_type))
+        print(("Warning: Unknown queue type: %s" %(queue_type)))
         queue_name = queue_type
 
     if queue_type is None:
         print("  - queue type: unspecified")
     else:
-        print("  - queue type: %s" %(queue_type))
+        print(("  - queue type: %s" %(queue_type)))
     if queue_name is None:
         print(" - queue name unspecified")
     else:
-        print(" - queue name: %s" %(queue_name))
+        print((" - queue name: %s" %(queue_name)))
 
     misc_utils.make_dir(cluster_output_dir)
     if cluster_scripts_dir == None:
@@ -219,7 +219,7 @@
     Execute cluster_cmd and return its job ID if
     it can be fetched.
     """
-    print("Executing: %s" %(cluster_cmd))
+    print(("Executing: %s" %(cluster_cmd)))
     proc = subprocess.Popen(cluster_cmd, shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
@@ -284,19 +284,19 @@
     if cluster_cmd not in supported_cmds:
         return
     num_jobs = len(job_ids)
-    print("Waiting on a set of %d jobs..." %(num_jobs))
+    print(("Waiting on a set of %d jobs..." %(num_jobs)))
     curr_time = time.strftime("%x, %X")
     t_start = time.time()
-    print("  - Starting to wait at %s" %(curr_time))
+    print(("  - Starting to wait at %s" %(curr_time)))
     completed_jobs = {}
     for job_id in job_ids:
         if job_id in completed_jobs:
             continue
         wait_on_job(job_id, cluster_cmd)
-        print("  - Job ", job_id, " completed.")
+        print(("  - Job ", job_id, " completed."))
         completed_jobs[job_id] = True
     curr_time = time.strftime("%x, %X")
     t_end = time.time()
-    print("Jobs completed at %s" %(curr_time))
+    print(("Jobs completed at %s" %(curr_time)))
     duration = ((t_end - t_start) / 60.) / 60.
-    print("  - Took %.2f hours." %(duration))
+    print(("  - Took %.2f hours." %(duration)))
--- src/MISO/misopy/compare_miso.py	(original)
+++ src/MISO/misopy/compare_miso.py	(refactored)
@@ -74,8 +74,8 @@
         use_compressed = \
             os.path.abspath(os.path.expanduser(options.use_compressed))
         if not os.path.exists(use_compressed):
-            print("Error: mapping filename from event IDs to compressed IDs %s " \
-                  "is not found." %(use_compressed))
+            print(("Error: mapping filename from event IDs to compressed IDs %s " \
+                  "is not found." %(use_compressed)))
             sys.exit(1)
         else:
             print("Compression being used.")
@@ -85,7 +85,7 @@
         sample2_dirname = os.path.abspath(options.samples_to_compare[1])
         output_dirname = os.path.abspath(options.samples_to_compare[2])
         if not os.path.isdir(output_dirname):
-            print("Making comparisons directory: %s" %(output_dirname))
+            print(("Making comparisons directory: %s" %(output_dirname)))
             misc_utils.make_dir(output_dirname)
         ht.output_samples_comparison(sample1_dirname,
                                      sample2_dirname,
--- src/MISO/misopy/exon_utils.py	(original)
+++ src/MISO/misopy/exon_utils.py	(refactored)
@@ -93,7 +93,7 @@
     - records in gff format
     - filename to output results to
     """
-    print("Outputting exons to file: %s" %(output_filename))
+    print(("Outputting exons to file: %s" %(output_filename)))
 
     if output_format == "gff":
         # Write file in GFF format
@@ -155,13 +155,13 @@
     output_filename = os.path.join(output_dir, bam_basename)
 
     print("Mapping BAM to GFF...")
-    print("  - BAM: %s" %(bam_filename))
-    print("  - GFF: %s" %(gff_filename))
-    print("  - Output file: %s" %(output_filename))
+    print(("  - BAM: %s" %(bam_filename)))
+    print(("  - GFF: %s" %(gff_filename)))
+    print(("  - Output file: %s" %(output_filename)))
 
     if os.path.isfile(output_filename):
-        print("WARNING: %s exists. Skipping.." \
-              %(output_filename))
+        print(("WARNING: %s exists. Skipping.." \
+              %(output_filename)))
         return output_filename
 
     # "-intervals" option embeds the original GFF coordinates
@@ -190,8 +190,8 @@
     if cmd_status != 0:
         raise Exception("Error: tagBam call failed.")
     t2 = time.time()
-    print("tagBam call took %.2f seconds." \
-          %(t2 - t1))
+    print(("tagBam call took %.2f seconds." \
+          %(t2 - t1)))
     return output_filename
 
 
@@ -220,10 +220,10 @@
     interval of a GFF)
     """
     if not os.path.isfile(bam_filename):
-        print("Error: BAM file %s does not exist." %(bam_filename))
+        print(("Error: BAM file %s does not exist." %(bam_filename)))
         sys.exit(1)
     if not os.path.isfile(gff_filename):
-        print("Error: GFF file %s does not exist." %(gff_filename))
+        print(("Error: GFF file %s does not exist." %(gff_filename)))
         sys.exit(1)
     if not os.path.isdir(output_dir):
         os.makedirs(output_dir)
@@ -233,16 +233,16 @@
     output_basename = bam_ext.sub("", os.path.basename(bam_filename))
     output_filename = "%s.bed" %(os.path.join(output_dir, output_basename))
     print("Generating coverage file...")
-    print("  - BAM file: %s" %(bam_filename))
-    print("  - GFF file: %s" %(gff_filename))
-    print("  - Output file: %s" %(output_filename))
+    print(("  - BAM file: %s" %(bam_filename)))
+    print(("  - GFF file: %s" %(gff_filename)))
+    print(("  - Output file: %s" %(output_filename)))
     if os.path.isfile(output_filename):
         print("  - File exists. Skipping...")
         return output_filename
     coverage_cmd = get_bedtools_coverage_cmd(bam_filename,
                                              gff_filename,
                                              output_filename)
-    print("Executing: %s" %(coverage_cmd))
+    print(("Executing: %s" %(coverage_cmd)))
     status = os.system(coverage_cmd)
     if status != 0:
         print("Error computing coverage using bedtools.")
@@ -269,17 +269,17 @@
     - all_constitutive: treat all exons as constitutive
     """
     print("Getting constitutive exons...")
-    print("  - Input GFF: %s" %(gff_filename))
-    print("  - Output dir: %s" %(output_dir))
-    print("  - Output format: %s" %(output_format))
+    print(("  - Input GFF: %s" %(gff_filename)))
+    print(("  - Output dir: %s" %(output_dir)))
+    print(("  - Output format: %s" %(output_format)))
 
     if not os.path.isdir(output_dir):
         os.makedirs(output_dir)
 
     if min_size > 0:
-        print("  - Including only exons greater than or " \
+        print(("  - Including only exons greater than or " \
               "equal to %d-bp" \
-              %(min_size))
+              %(min_size)))
 
     t1 = time.time()
     gff_in = gff_utils.GFFDatabase(from_filename=gff_filename)
@@ -288,7 +288,7 @@
 
     num_exons = 0
 
-    for gene, mRNAs in gff_in.mRNAs_by_gene.items():
+    for gene, mRNAs in list(gff_in.mRNAs_by_gene.items()):
         # For each gene, look at all mRNAs and return constitutive exon
         curr_const_exons = \
             get_const_exons_from_mRNA(gff_in, mRNAs,
@@ -308,8 +308,8 @@
                                        %(basename,
                                          min_size))
     if not all_constitutive:
-        print("Constitutive exon retrieval took %.2f seconds (%d exons)." \
-              %((t2 - t1), num_exons))
+        print(("Constitutive exon retrieval took %.2f seconds (%d exons)." \
+              %((t2 - t1), num_exons)))
         output_exons_to_file(const_exons_by_gene, output_filename,
                              output_format=output_format)
     else:
--- src/MISO/misopy/filter_events.py	(original)
+++ src/MISO/misopy/filter_events.py	(refactored)
@@ -111,8 +111,8 @@
         num_pass = len(comp[0])
         output_filename = os.path.join(output_dir,
                                        os.path.basename(fname) + ".filtered")
-        print("Filtering %s into %s" %(",".join(filter_filename),
-                                       output_filename))
+        print(("Filtering %s into %s" %(",".join(filter_filename),
+                                       output_filename)))
         filter_output(comp[0], output_filename, h, num_pass, total_events[0])
 
     else:
@@ -180,8 +180,8 @@
             fname = filter_filename[i]
             output_filename = os.path.join(output_dir,
                                            os.path.basename(fname) + ".filtered")
-            print("Filtering %s into %s" %(fname,
-                                           output_filename))
+            print(("Filtering %s into %s" %(fname,
+                                           output_filename)))
             filter_output(comp_new[i], output_filename, h, num_pass, total_events[i])
 
 
@@ -257,9 +257,9 @@
 
         num_isoforms = len(event['isoforms'])
         if num_isoforms != 2:
-            print("Error: filter_events.py is only defined for MISO output " \
+            print(("Error: filter_events.py is only defined for MISO output " \
                   "on two-isoform alternative events. " \
-                  "Found a non-two isoform event: %s" %(event['event_name']))
+                  "Found a non-two isoform event: %s" %(event['event_name'])))
             sys.exit(1)
 
         # Get sample 1 counts
@@ -333,10 +333,10 @@
     """
     dictlist2file(filtered_events, output_filename, h)
 
-    print("%d/%d events pass the filter (%.2f percent)." \
+    print(("%d/%d events pass the filter (%.2f percent)." \
           %(num_pass,
             total_events,
-            (num_pass/float(total_events)) * 100))
+            (num_pass/float(total_events)) * 100)))
 
 
 def greeting():
--- src/MISO/misopy/hypothesis_test.py	(original)
+++ src/MISO/misopy/hypothesis_test.py	(refactored)
@@ -154,10 +154,10 @@
         all_same_diff = all(posterior_diff - posterior_diff[0] == 0)
 
         if all_same_diff and not warning_outputted:
-            print("Warning: Event %s was not sampled properly in %s or %s" \
+            print(("Warning: Event %s was not sampled properly in %s or %s" \
                   %(event_name,
                     sample1_label,
-                    sample2_label))
+                    sample2_label)))
             warning_outputted = True
 
         if mean_abs_posterior_diff <= .009 or all_same_diff:
@@ -189,16 +189,16 @@
     Expects two directories with samples from a MISO run, where corresponding
     events in the two samples' directories begin with the same event name.
     """
-    print("Given output dir: %s" %(output_dir))
+    print(("Given output dir: %s" %(output_dir)))
     print("Retrieving MISO files in sample directories...")
     sample1_obj = MISOSamples(sample1_dir,
                               use_compressed=use_compressed)
     sample2_obj = MISOSamples(sample2_dir,
                               use_compressed=use_compressed)
-    print("Computing sample comparison between %s and %s..." %(sample1_dir,
-                                                               sample2_dir))
-    print("  - No. of events in %s: %d" %(sample1_dir, sample1_obj.num_events))
-    print("  - No. of events in %s: %d" %(sample2_dir, sample2_obj.num_events))
+    print(("Computing sample comparison between %s and %s..." %(sample1_dir,
+                                                               sample2_dir)))
+    print(("  - No. of events in %s: %d" %(sample1_dir, sample1_obj.num_events)))
+    print(("  - No. of events in %s: %d" %(sample2_dir, sample2_obj.num_events)))
     # Output header for Bayes factor file
     if sample_labels is None:
         # Use directory names as sample labels
@@ -207,11 +207,11 @@
     else:
         # If we're given sample labels, use them
         sample1_label, sample2_label = sample_labels
-        print("Using user-given sample labels (sample1 = %s, sample2 = %s)" \
-              %(sample1_label, sample2_label))
+        print(("Using user-given sample labels (sample1 = %s, sample2 = %s)" \
+              %(sample1_label, sample2_label)))
     output_dir = os.path.join(output_dir, "%s_vs_%s" %(sample1_label,
                                                        sample2_label))
-    print("Creating comparisons parent directory: %s" %(output_dir))
+    print(("Creating comparisons parent directory: %s" %(output_dir)))
     # Create parent directory for comparison
     misc_utils.make_dir(output_dir)
 
@@ -340,7 +340,7 @@
                          gene_info["mRNA_ends"]]
         output_line = "%s\n" %("\t".join(output_fields))
         output_file.write(output_line)
-    print("Compared a total of %d events." %(num_events_compared))
+    print(("Compared a total of %d events." %(num_events_compared)))
     output_file.close()
 
 
@@ -369,8 +369,8 @@
         bayes_factor = bayes_factor[0]
 
     if print_bayes:
-        print("diff_posterior: %.4f" %(diff_posterior))
-        print("bayes_factor: %.2f" %(bayes_factor))
+        print(("diff_posterior: %.4f" %(diff_posterior)))
+        print(("bayes_factor: %.2f" %(bayes_factor)))
 
     # Upper bound on Bayes factor
     if bayes_factor > max_bf:
--- src/MISO/misopy/index_gff.py	(original)
+++ src/MISO/misopy/index_gff.py	(refactored)
@@ -44,7 +44,7 @@
     genes_by_chrom = defaultdict(dict)
 
     # Split up genes by chromosome
-    for gene_id, gene_info in gff_genes.items():
+    for gene_id, gene_info in list(gff_genes.items()):
         gene_obj = gene_info["gene_object"]
         gene_hierarchy = gene_info["hierarchy"]
         genes_by_chrom[gene_obj.chrom][gene_id] = \
@@ -63,7 +63,7 @@
 
     # Serialize all the genes in each chromosome into their
     # own directory
-    for chrom, chrom_genes in genes_by_chrom.items():
+    for chrom, chrom_genes in list(genes_by_chrom.items()):
         if chrom.startswith("chr"):
             chrom_dir_name = chrom
         else:
@@ -74,14 +74,14 @@
         # Make directory for chromosome if it doesn't already exist
         chrom_dir = os.path.join(output_dir, chrom_dir_name)
         if not os.path.isdir(chrom_dir):
-            print("Making directory: %s" %(chrom_dir))
+            print(("Making directory: %s" %(chrom_dir)))
             os.makedirs(chrom_dir)
 
         t1 = time.time()
         # Serialize each gene into a separate file
         num_genes = len(genes_by_chrom[chrom])
 
-        for gene_id, gene_info in genes_by_chrom[chrom].items():
+        for gene_id, gene_info in list(genes_by_chrom[chrom].items()):
             gene_compressed_id = None
             if compress_id:
                 gene_compressed_id = \
@@ -105,13 +105,13 @@
                 compressed_id_to_gene_id[gene_compressed_id] = gene_id
 
         t2 = time.time()
-        print("  - Chromosome serialization took %.2f seconds" %(t2 - t1))
+        print(("  - Chromosome serialization took %.2f seconds" %(t2 - t1)))
 
     # Shelve the mapping from gene ids to filenames
     shelved_filename = os.path.join(output_dir,
                                     "genes_to_filenames.shelve")
     shelved_data = shelve.open(shelved_filename)
-    for k, v in gene_id_to_filename.items():
+    for k, v in list(gene_id_to_filename.items()):
         shelved_data[k] = v
     shelved_data.close()
 
@@ -119,14 +119,14 @@
     shelved_filename = os.path.join(output_dir,
                                     "compressed_ids_to_genes.shelve")
     shelved_data = shelve.open(shelved_filename)
-    for k, v in compressed_id_to_gene_id.items():
+    for k, v in list(compressed_id_to_gene_id.items()):
         shelved_data[k] = v
     shelved_data.close()
 
     # Output a list of genes in ordinary GFF format
     genes_filename = os.path.join(output_dir, "genes.gff")
     print("Outputting gene records in GFF format...")
-    print("  - Output file: %s" %(genes_filename))
+    print(("  - Output file: %s" %(genes_filename)))
     with open(gff_filename) as gff_in:
         with open(genes_filename, "w") as gff_out:
             for line in gff_in:
@@ -148,17 +148,17 @@
     # First check that the GFF is not already indexed
     indexed_files = glob.glob(os.path.join(output_dir, "chr*"))
     if len(indexed_files) >= 1:
-        print("%s appears to already be indexed. Aborting." \
-            %(gff_filename))
+        print(("%s appears to already be indexed. Aborting." \
+            %(gff_filename)))
         return
 
-    print("  - GFF: %s" %(gff_filename))
-    print("  - Outputting to: %s" %(output_dir))
+    print(("  - GFF: %s" %(gff_filename)))
+    print(("  - Outputting to: %s" %(output_dir)))
     overall_t1 = time.time()
     t1 = time.time()
     gff_genes = gene_utils.load_genes_from_gff(gff_filename)
     t2 = time.time()
-    print("  - Loading of genes from GFF took %.2f seconds" %(t2 - t1))
+    print(("  - Loading of genes from GFF took %.2f seconds" %(t2 - t1)))
 
     t1 = time.time()
     serialize_genes(gff_genes,
@@ -166,9 +166,9 @@
                     output_dir,
                     compress_id=compress_id)
     t2 = time.time()
-    print("  - Serialization of genes from GFF took %.2f seconds" %(t2 - t1))
+    print(("  - Serialization of genes from GFF took %.2f seconds" %(t2 - t1)))
     overall_t2 = time.time()
-    print("Indexing of GFF took %.2f seconds." %(overall_t2 - overall_t1))
+    print(("Indexing of GFF took %.2f seconds." %(overall_t2 - overall_t1)))
 
 
 def main():
--- src/MISO/misopy/kde_subclass.py	(original)
+++ src/MISO/misopy/kde_subclass.py	(refactored)
@@ -74,7 +74,7 @@
     xn = np.random.randn(n_basesample)
     xnmean = xn.mean()
     xnstd = xn.std(ddof=1)
-    print(xnmean, xnstd)
+    print((xnmean, xnstd))
 
     # get kde for original sample
     gkde = stats.gaussian_kde(xn)
@@ -83,16 +83,16 @@
     xs = np.linspace(-7,7,501)
     kdepdf = gkde.evaluate(xs)
     normpdf = stats.norm.pdf(xs, loc=xnmean, scale=xnstd)
-    print('MSE', np.sum((kdepdf - normpdf)**2))
-    print('axabserror', np.max(np.abs(kdepdf - normpdf)))
+    print(('MSE', np.sum((kdepdf - normpdf)**2)))
+    print(('axabserror', np.max(np.abs(kdepdf - normpdf))))
     intervall = xs[1] - xs[0]
     assert_(np.sum((kdepdf - normpdf)**2)*intervall < 0.01)
     #assert_array_almost_equal(kdepdf, normpdf, decimal=2)
-    print(gkde.integrate_gaussian(0.0, 1.0))
-    print(gkde.integrate_box_1d(-np.inf, 0.0))
-    print(gkde.integrate_box_1d(0.0, np.inf))
-    print(gkde.integrate_box_1d(-np.inf, xnmean))
-    print(gkde.integrate_box_1d(xnmean, np.inf))
+    print((gkde.integrate_gaussian(0.0, 1.0)))
+    print((gkde.integrate_box_1d(-np.inf, 0.0)))
+    print((gkde.integrate_box_1d(0.0, np.inf)))
+    print((gkde.integrate_box_1d(-np.inf, xnmean)))
+    print((gkde.integrate_box_1d(xnmean, np.inf)))
     
     assert_almost_equal(gkde.integrate_box_1d(xnmean, np.inf), 0.5, decimal=1)
     assert_almost_equal(gkde.integrate_box_1d(-np.inf, xnmean), 0.5, decimal=1)
--- src/MISO/misopy/legacy_test_pysplicing.py	(original)
+++ src/MISO/misopy/legacy_test_pysplicing.py	(refactored)
@@ -17,7 +17,7 @@
 # Load BAM file
 
 
-print(reads[1], type(reads[1]))
+print((reads[1], type(reads[1])))
 results = pysplicing.MISO(gene, 0, reads[1], reads[2], 33, 5000, 500, 10,
                           (1.0, 1.0, 1.0))
 
--- src/MISO/misopy/misc_utils.py	(original)
+++ src/MISO/misopy/misc_utils.py	(refactored)
@@ -35,8 +35,8 @@
     Load mapping from compressed IDs to genes.
     """
     if not os.path.exists(compressed_filename):
-        print("Error: %s compressed file does not exist." \
-              %(compressed_filename))
+        print(("Error: %s compressed file does not exist." \
+              %(compressed_filename)))
         sys.exit(1)
     compressed_ids_to_genes = {}
     # Load mapping from gene IDs to their hashes
@@ -61,7 +61,7 @@
 
 def make_dir(dirpath):
     if os.path.isfile(dirpath):
-        print("Error: %s is a file!" %(dirpath))
+        print(("Error: %s is a file!" %(dirpath)))
         sys.exit(1)
     # Try to make the directory
     try:
@@ -84,10 +84,10 @@
         elif not os.access(fpath, os.X_OK):
             # If the file exists but is not executable, warn
             # the user
-            print("WARNING: Found %s but it is not executable." %(fpath))
-            print("Please ensure %s is executable." %(fpath))
+            print(("WARNING: Found %s but it is not executable." %(fpath)))
+            print(("Please ensure %s is executable." %(fpath)))
             print("On Unix, use something like: ")
-            print("  chmod +x %s" %(fpath))
+            print(("  chmod +x %s" %(fpath)))
             time.sleep(10)
             return False
         return True
--- src/MISO/misopy/miso.py	(original)
+++ src/MISO/misopy/miso.py	(refactored)
@@ -178,7 +178,7 @@
                     if gene_id not in self.gene_ids_to_gff_index:
                         # If gene is not found (perhaps because it had only a 'gene'
                         # entry in GFF, with no mRNA children), then skip it
-                        print("Skipping: %s" %(gene_id))
+                        print(("Skipping: %s" %(gene_id)))
                         continue
                     index_fname = self.gene_ids_to_gff_index[gene_id]
                     output_line = "%s\t%s\n" %(gene_id,
@@ -201,7 +201,7 @@
         ##
         ## Prepare all the files necessary to run each batch
         ##
-        print("Preparing to run %d batches of jobs..." %(num_batches))
+        print(("Preparing to run %d batches of jobs..." %(num_batches)))
         miso_run = os.path.join(miso_path, "run_miso.py")
         for batch_num, batch in enumerate(batch_filenames):
             batch_filename, batch_size = batch
@@ -249,8 +249,8 @@
         cluster_jobs = []
         for batch_num, cmd_info in enumerate(all_miso_cmds):
             miso_cmd, batch_size = cmd_info
-            print("Running batch of %d genes.." %(batch_size))
-            print("  - Executing: %s" %(miso_cmd))
+            print(("Running batch of %d genes.." %(batch_size)))
+            print(("  - Executing: %s" %(miso_cmd)))
             # Make a log file for the batch, where all the output
             # will be redirected
             time_str = time.strftime("%m-%d-%y_%H:%M:%S")
@@ -262,7 +262,7 @@
                 # Run locally
                 p = subprocess.Popen(cmd_to_run, shell=True)
                 thread_id = "batch-%d" %(batch_num)
-                print("  - Submitted thread %s" %(thread_id))
+                print(("  - Submitted thread %s" %(thread_id)))
                 self.threads[thread_id] = p
             else:
                 # Run on cluster
@@ -272,7 +272,7 @@
                     queue_type = "short"
                 # Run on cluster
                 job_name = "gene_psi_batch_%d" %(batch_num)
-                print("Submitting to cluster: %s" %(cmd_to_run))
+                print(("Submitting to cluster: %s" %(cmd_to_run)))
                 job_id = \
                     cluster_utils.run_on_cluster(cmd_to_run,
                                                  job_name,
@@ -318,7 +318,7 @@
         num_threads = len(self.threads)
         if num_threads == 0:
             return
-        print("Waiting on %d threads..." %(num_threads))
+        print(("Waiting on %d threads..." %(num_threads)))
         t_start = time.time()
         for thread_name in self.threads:
             if thread_name in threads_completed:
@@ -360,10 +360,10 @@
       events that do not meet the coverage criteria from the run.
     """
     print("Computing Psi values...")
-    print("  - GFF index: %s" %(gff_dir))
-    print("  - BAM: %s" %(bam_filename))
-    print("  - Read length: %d" %(read_len))
-    print("  - Output directory: %s" %(output_dir))
+    print(("  - GFF index: %s" %(gff_dir)))
+    print(("  - BAM: %s" %(bam_filename)))
+    print(("  - Read length: %d" %(read_len)))
+    print(("  - Output directory: %s" %(output_dir)))
 
     misc_utils.make_dir(output_dir)
 
@@ -513,7 +513,7 @@
     greeting()
 
     if options.version:
-        print("MISO version %s\n" %(misopy.__version__))
+        print(("MISO version %s\n" %(misopy.__version__)))
 
     ##
     ## Load the settings file
@@ -593,29 +593,29 @@
     if options.view_gene != None:
         indexed_gene_filename = \
             os.path.abspath(os.path.expanduser(options.view_gene))
-        print("Viewing genes in %s" %(indexed_gene_filename))
+        print(("Viewing genes in %s" %(indexed_gene_filename)))
         gff_genes = gff_utils.load_indexed_gff_file(indexed_gene_filename)
 
         if gff_genes == None:
             print("No genes.")
             sys.exit(1)
 
-        for gene_id, gene_info in gff_genes.items():
-            print("Gene %s" %(gene_id))
+        for gene_id, gene_info in list(gff_genes.items()):
+            print(("Gene %s" %(gene_id)))
             gene_obj = gene_info['gene_object']
-            print(" - Gene object: ", gene_obj)
+            print((" - Gene object: ", gene_obj))
             print("==")
             print("Isoforms: ")
             for isoform in gene_obj.isoforms:
-                print(" - ", isoform)
+                print((" - ", isoform))
             print("==")
             print("mRNA IDs: ")
             for mRNA_id in gene_info['hierarchy'][gene_id]['mRNAs']:
-                print("%s" %(mRNA_id))
+                print(("%s" %(mRNA_id)))
             print("==")
             print("Exons: ")
             for exon in gene_obj.parts:
-                print(" - ", exon)
+                print((" - ", exon))
 
 if __name__ == "__main__":
     main()
--- src/MISO/misopy/miso_db.py	(original)
+++ src/MISO/misopy/miso_db.py	(refactored)
@@ -40,8 +40,8 @@
         # be named numerically.
         self.table_name = "table_%s" %(get_table_name_from_file(self.db_fname))
         if self.table_name is None:
-            print("Error: Cannot retrieve name of MISO db file %s" \
-                  %(self.db_fname))
+            print(("Error: Cannot retrieve name of MISO db file %s" \
+                  %(self.db_fname)))
             return None
         self.conn = sqlite3.connect(self.db_fname)
         # Determine event name format
@@ -145,18 +145,18 @@
     Convert MISO directory into MySQL table using sqlite3.
     """
     print("Converting MISO directory into database")
-    print("  - MISO dir: %s" %(dir_to_compress))
-    print("  - Output file: %s" %(output_filename))
+    print(("  - MISO dir: %s" %(dir_to_compress)))
+    print(("  - Output file: %s" %(output_filename)))
     if not os.path.isdir(dir_to_compress):
-        print("Error: %s not a directory, aborting." %(dir_to_compress))
+        print(("Error: %s not a directory, aborting." %(dir_to_compress)))
         sys.exit(1)
     miso_filenames = glob.glob(os.path.join(dir_to_compress, "*.miso"))
     num_files = len(miso_filenames)
-    print("  - %d files to compress" %(num_files))
+    print(("  - %d files to compress" %(num_files)))
     # Initialize the SQLite database
     if os.path.isfile(output_filename):
-        print("Error: Database %s already exists, aborting." \
-              %(output_filename))
+        print(("Error: Database %s already exists, aborting." \
+              %(output_filename)))
         return None
     conn = sqlite3.connect(output_filename)
     c = conn.cursor()
@@ -169,7 +169,7 @@
     for miso_fname in miso_filenames:
         miso_file_fields = load_miso_file_as_str(miso_fname)
         if miso_file_fields is None:
-            print("Error: Cannot compress %s. Aborting." %(miso_fname))
+            print(("Error: Cannot compress %s. Aborting." %(miso_fname)))
             return None
         header, psi_vals_and_scores = miso_file_fields
         ######
@@ -215,7 +215,7 @@
     into an sqlite database.
     """
     if not os.path.isfile(miso_filename):
-        print("Error: Cannot find %s" %(miso_filename))
+        print(("Error: Cannot find %s" %(miso_filename)))
         return None
     header = ""
     psi_vals_and_scores = ""
--- src/MISO/misopy/miso_pack.py	(original)
+++ src/MISO/misopy/miso_pack.py	(refactored)
@@ -49,9 +49,9 @@
         """
         t1 = time.time()
         for miso_dirname in miso_dirnames:
-            print("Processing: %s" %(miso_dirname))
+            print(("Processing: %s" %(miso_dirname)))
             if not os.path.isdir(miso_dirname):
-                print("Error: %s not a directory." %(miso_dirname))
+                print(("Error: %s not a directory." %(miso_dirname)))
                 sys.exit(1)
             for dir_to_compress, subdirs, curr_fnames in os.walk(miso_dirname):
                 if miso_db.is_miso_unpacked_dir(dir_to_compress):
@@ -59,8 +59,8 @@
                     # into a MISO database
                     chrom_basename = os.path.basename(dir_to_compress)
                     if len(chrom_basename) == 0:
-                        print("Error: Failed to pack MISO directory %s" \
-                              %(miso_dirname))
+                        print(("Error: Failed to pack MISO directory %s" \
+                              %(miso_dirname)))
                         raise Exception("Basename for %s is empty!" \
                               %(dir_to_compress))
                     db_fname = \
@@ -75,7 +75,7 @@
                     # containing the *.miso file
                     shutil.rmtree(dir_to_compress)
         t2 = time.time()
-        print("Packing took %.2f minutes" %((t2 - t1)/60.))
+        print(("Packing took %.2f minutes" %((t2 - t1)/60.)))
 
 
 def greeting(parser=None):
@@ -102,12 +102,12 @@
 def view_miso_db(db_fname):
     db_fname = misc_utils.pathify(db_fname)
     if not os.path.isfile(db_fname):
-        print("Error: %s does not exist." %(db_fname))
+        print(("Error: %s does not exist." %(db_fname)))
         sys.exit(1)
     curr_db = miso_db.MISODatabase(db_fname)
     event_names = curr_db.get_all_event_names()
     num_events = len(event_names)
-    print("Database contains %d events" %(num_events))
+    print(("Database contains %d events" %(num_events)))
     for event in event_names:
         print(event)
 
--- src/MISO/misopy/miso_sampler.py	(original)
+++ src/MISO/misopy/miso_sampler.py	(refactored)
@@ -116,8 +116,8 @@
     counts = defaultdict(int)
     for a in assignments:
         counts[a] += 1
-    for k, v in counts.items():
-        print("Total of %d in isoform %d" %(v, k))
+    for k, v in list(counts.items()):
+        print(("Total of %d in isoform %d" %(v, k)))
 
 
 def float_array_to_str(array_of_floats):
@@ -227,14 +227,14 @@
         self.num_reads = len(read_positions)
 
         if self.num_reads == 0:
-            print("No reads for gene: %s" %(gene.label))
+            print(("No reads for gene: %s" %(gene.label)))
             return
 
         output_file = output_file + ".miso"
         # If output filename exists, don't run sampler
         if os.path.isfile(os.path.normpath(output_file)):
-            print("Output filename %s exists, not running MISO." \
-                %(output_file))
+            print(("Output filename %s exists, not running MISO." \
+                %(output_file)))
             return None
 
         self.params['iters'] = num_iters
@@ -362,7 +362,7 @@
         #self.miso_logger.info("Number of iterations recorded: %d" %(len(psi_vectors)))
 
         # Write MISO output to file
-        print("Outputting samples to: %s..." %(output_file))
+        print(("Outputting samples to: %s..." %(output_file)))
         self.miso_logger.info("Outputting samples to: %s" %(output_file))
         self.output_miso_results(output_file, gene, reads_data, assignments,
                                  psi_vectors, kept_log_scores, num_iters,
@@ -370,7 +370,7 @@
                                  proposal_type)
         if verbose:
             t2 = time.time()
-            print("Event took %.2f seconds" %(t2 - t1))
+            print(("Event took %.2f seconds" %(t2 - t1)))
 
 
     def output_miso_results(self, output_file, gene, reads_data, assignments,
@@ -472,8 +472,8 @@
     Run sampler on a two-isoform gene event.
     """
     print("Running sampler on a two-isoform event...")
-    print("  - Gene label: ", gene.label, gene)
-    print("  - NI, NE, NB: %d, %d, %d" %(ni, ne, nb))
+    print(("  - Gene label: ", gene.label, gene))
+    print(("  - NI, NE, NB: %d, %d, %d" %(ni, ne, nb)))
     print("Using default sampler parameters.")
     if gene.chrom != None:
         # Index output by chromosome
@@ -509,7 +509,7 @@
     # Compute credible intervals
     cred_interval = ht.compute_credible_intervals(samples, confidence_level=confidence_level)
     t2 = time.time()
-    print("  - Sampler run took %s seconds." %(str(t2-t1)))
+    print(("  - Sampler run took %s seconds." %(str(t2-t1))))
     # return samples and credible intervals
     return (samples, cred_interval)
 
@@ -521,7 +521,7 @@
     overhang_len = 4
     output_dir = "profiler-test"
     for x in range(10):
-        print("x = %d" %(x))
+        print(("x = %d" %(x)))
         a, b = run_sampler_on_event(gene, 500, 50, 40, read_len, overhang_len,
                                     10000, output_dir)
 
--- src/MISO/misopy/miso_utils.py	(original)
+++ src/MISO/misopy/miso_utils.py	(refactored)
@@ -14,8 +14,8 @@
     """
     miso_basename_files = []
     if not os.path.isdir(dirname):
-        print("Error: %s not a directory." \
-              %(dirname))
+        print(("Error: %s not a directory." \
+              %(dirname)))
         return miso_basename_files
     miso_files = glob.glob(os.path.join(dirname, "*.miso"))
     # return basenames
@@ -58,7 +58,7 @@
     else:
         miso_prefix = ""
 
-    print("miso_prefix: %s" %(miso_prefix))
+    print(("miso_prefix: %s" %(miso_prefix)))
 
     if "miso_files" not in settings:
         print("Error: need \'miso_files\' to be set in settings file in " \
@@ -75,8 +75,8 @@
 
     for curr_sample_path in miso_sample_paths:
         event_found = False
-        print("Searching for MISO files in: %s" %(curr_sample_path))
-        print("  - Looking for chromosome %s directories" %(chrom))
+        print(("Searching for MISO files in: %s" %(curr_sample_path)))
+        print(("  - Looking for chromosome %s directories" %(chrom)))
 
         if event_with_miso_ext in get_miso_files_from_dir(curr_sample_path):
             # Allow the event to be in a top-level directory outside of a
@@ -85,8 +85,8 @@
             event_filename = os.path.join(curr_sample_path,
                                           event_with_miso_ext)
             miso_filenames.append(event_filename)
-            print("Found %s MISO file in top-level directory." %(event_name))
-            print("  - Location: %s" %(event_filename))
+            print(("Found %s MISO file in top-level directory." %(event_name)))
+            print(("  - Location: %s" %(event_filename)))
             print("Please try to keep MISO event files in their chromosome "\
                   "directory.")
             break
@@ -99,7 +99,7 @@
             # see if the MISO file is in there
             if chrom in dirs:
                 chrom_dirname = os.path.abspath(os.path.join(root, chrom))
-                print("Looking for MISO files in: %s" %(chrom_dirname))
+                print(("Looking for MISO files in: %s" %(chrom_dirname)))
                 # Fetch MISO files, if any
                 curr_miso_files = get_miso_files_from_dir(chrom_dirname)
 
@@ -110,19 +110,19 @@
                     # Add to list
                     event_filename = os.path.join(root, chrom,
                                                   event_with_miso_ext)
-                    print("Found %s MISO file." %(event_name))
-                    print("  - Location: %s" %(event_filename))
+                    print(("Found %s MISO file." %(event_name)))
+                    print(("  - Location: %s" %(event_filename)))
                     miso_filenames.append(event_filename)
                     break
 
         if not event_found:
             # If we're here, it means we couldn't find the MISO
             # output files for the current sample
-            print("Error: Could not find MISO output files for " \
+            print(("Error: Could not find MISO output files for " \
                   "sample %s (after searching in %s and its subdirectories). " \
                   "Are you sure MISO output files are present in that " \
                   "directory?" %(os.path.basename(curr_sample_path),
-                                 curr_sample_path))
+                                 curr_sample_path)))
             # Include empty path for this sample
             miso_filenames.append('')
 
@@ -130,7 +130,7 @@
     # the number of samples to be plotted
     if len(miso_filenames) != len(miso_files):
         print("WARNING: Could not find MISO files for all samples.")
-        print("  - miso_filenames: ", miso_filenames)
-        print("  - miso_samples to be plotted: ", miso_files)
+        print(("  - miso_filenames: ", miso_filenames))
+        print(("  - miso_samples to be plotted: ", miso_files))
 
     return miso_filenames
--- src/MISO/misopy/miso_zip.py	(original)
+++ src/MISO/misopy/miso_zip.py	(refactored)
@@ -52,17 +52,17 @@
         results as a zip file.
         """
         if os.path.isfile(output_filename):
-            print("Error: %s already exists. Please delete to overwrite." \
-                  %(output_filename))
+            print(("Error: %s already exists. Please delete to overwrite." \
+                  %(output_filename)))
         output_dir = "%s%s" %(output_filename, miso_db.MISO_DB_EXT)
         if os.path.isdir(output_dir):
-            print("Error: Intermediate compressed directory %s " \
-                  "exists. Please delete to overwrite." %(output_dir))
+            print(("Error: Intermediate compressed directory %s " \
+                  "exists. Please delete to overwrite." %(output_dir)))
             sys.exit(1)
         for miso_dirname in miso_dirnames:
-            print("Processing: %s" %(miso_dirname))
+            print(("Processing: %s" %(miso_dirname)))
             if not os.path.isdir(miso_dirname):
-                print("Error: %s not a directory." %(miso_dirname))
+                print(("Error: %s not a directory." %(miso_dirname)))
                 sys.exit(1)
             if os.path.isfile(output_filename):
                 print("Output file %s already exists, aborting. " \
@@ -84,15 +84,15 @@
         print("Zipping compressed directory with standard zip...")
         t1 = time.time()
         zipper(output_dir, output_filename)
-        print("Deleting intermediate directory: %s" %(output_dir))
+        print(("Deleting intermediate directory: %s" %(output_dir)))
         shutil.rmtree(output_dir)
         t2 = time.time()
-        print("  - Standard zipping took %.2f minutes." \
-              %((t2 - t1)/60.))
+        print(("  - Standard zipping took %.2f minutes." \
+              %((t2 - t1)/60.)))
         print("To access the SQLite representation of raw MISO output ")
         print("(*.miso) files, simply unzip with the .miso_zip file ")
         print("with standard unzip utility:\n")
-        print("  unzip %s" %(output_filename))
+        print(("  unzip %s" %(output_filename)))
 
 
     def uncompress(self, compressed_filename, output_dir):
@@ -101,21 +101,21 @@
         uncompresses it into 'output_dir'.
         """
         if not os.path.isfile(compressed_filename):
-            print("Error: Cannot find %s, aborting." \
-                  %(compressed_filename))
+            print(("Error: Cannot find %s, aborting." \
+                  %(compressed_filename)))
         if not os.path.basename(compressed_filename).endswith(self.comp_ext):
-            print("Warning: %s does not end in %s. Are you sure it is " \
+            print(("Warning: %s does not end in %s. Are you sure it is " \
                   "a file compressed by miso_zip.py?" \
-                  %(compressed_filename, self.comp_ext))
+                  %(compressed_filename, self.comp_ext)))
         if not os.path.isdir(output_dir):
             os.makedirs(output_dir)
-        print("Uncompressing %s into %s" %(compressed_filename,
-                                           output_dir))
+        print(("Uncompressing %s into %s" %(compressed_filename,
+                                           output_dir)))
         # First unzip the file using conventional unzip
         unzipped_files = unzipper(compressed_filename, output_dir)
         # Remove the original .zip
         if os.path.isfile(compressed_filename):
-            print("Removing the compressed file %s" %(compressed_filename))
+            print(("Removing the compressed file %s" %(compressed_filename)))
             if os.path.isfile(compressed_filename):
                 os.remove(compressed_filename)
 
@@ -142,21 +142,21 @@
     output_filename = utils.pathify(output_filename)
     for input_dir in input_dirs:
         if not os.path.isdir(input_dir):
-            print("Error: Cannot find directory %s" %(input_dir))
+            print(("Error: Cannot find directory %s" %(input_dir)))
             sys.exit(1)
     if not os.path.basename(output_filename).endswith(comp_ext):
-        print("Error: Compressed output filename must end in %s" \
-              %(comp_ext))
+        print(("Error: Compressed output filename must end in %s" \
+              %(comp_ext)))
         sys.exit(1)
     if os.path.isfile(output_filename):
-        print("Error: Output filename exists. Please delete %s to overwrite." \
-              %(output_filename))
+        print(("Error: Output filename exists. Please delete %s to overwrite." \
+              %(output_filename)))
         sys.exit(1)
     t1 = time.time()
     miso_comp = MISOCompressor()
     miso_comp.compress(output_filename, input_dirs)
     t2 = time.time()
-    print("Compression took %.2f minutes." %((t2 - t1)/60.))
+    print(("Compression took %.2f minutes." %((t2 - t1)/60.)))
 
 
 def uncompress_miso(compressed_filename, output_dir):
@@ -164,14 +164,14 @@
     Uncompress MISO directory.
     """
     if not os.path.isfile(compressed_filename):
-        print("Error: Zip file %s is not found." \
-              %(compressed_filename))
+        print(("Error: Zip file %s is not found." \
+              %(compressed_filename)))
         sys.exit(1)
     t1 = time.time()
     miso_comp = MISOCompressor()
     miso_comp.uncompress(compressed_filename, output_dir)
     t2 = time.time()
-    print("Uncompression took %.2f minutes." %((t2 - t1)/60.))
+    print(("Uncompression took %.2f minutes." %((t2 - t1)/60.)))
 
 
 def zipper(dir, zip_file):
--- src/MISO/misopy/module_availability.py	(original)
+++ src/MISO/misopy/module_availability.py	(refactored)
@@ -13,7 +13,7 @@
     print("Checking availability of Python modules for MISO")
     print("Looking for required Python modules..")
     for module_name in required_modules:
-        print("Checking for availability of: %s" %(module_name))
+        print(("Checking for availability of: %s" %(module_name)))
         try:
             __import__(module_name)
             # Manually check for correct matplotlib version
@@ -26,22 +26,22 @@
                           "to version 1.1.0 or later. This function is *not* required " \
                           "for MISO use.")
         except ImportError:
-            print("  - Module %s not available!" %(module_name))
+            print(("  - Module %s not available!" %(module_name)))
             if module_name == "matplotlib":
                 print("matplotlib is required for sashimi_plot")
             unavailable_mods += 1
     if unavailable_mods != 0:
-        print("Total of %d modules were not available. " \
-              "Please install these and try again." %(unavailable_mods))
+        print(("Total of %d modules were not available. " \
+              "Please install these and try again." %(unavailable_mods)))
     else:
         print("All modules are available!")
     print("Looking for required executables..")
     required_programs = ["samtools", "bedtools"]
     for prog in required_programs:
         p = utils.which(prog)
-        print("Checking if %s is available" %(prog))
+        print(("Checking if %s is available" %(prog)))
         if p is None:
-            print(" - Cannot find %s!" %(prog))
+            print((" - Cannot find %s!" %(prog)))
             if prog == "bedtools":
                 print("bedtools is only required for prefiltering " \
                       "and computation of insert lengths.")
@@ -50,7 +50,7 @@
                           "but outdated. Please upgrade bedtools and " \
                           "ensure that \'bedtools\' is available on path.")
         else:
-            print("  - %s is available" %(prog))
+            print(("  - %s is available" %(prog)))
     return unavailable_mods
 
 
--- src/MISO/misopy/parse_csv.py	(original)
+++ src/MISO/misopy/parse_csv.py	(refactored)
@@ -93,7 +93,7 @@
 
 
 def evalDict(d):
-    for k, v in d.items():
+    for k, v in list(d.items()):
         d[k] = tryEval(v)
     return d
 
--- src/MISO/misopy/parse_gene.py	(original)
+++ src/MISO/misopy/parse_gene.py	(refactored)
@@ -19,7 +19,7 @@
     exon_ends = []
     mRNAs = []
     chrom = None
-    for gene_id, gene_info in gff_genes.items():
+    for gene_id, gene_info in list(gff_genes.items()):
         if event == gene_id:
             gene_obj = gene_info['gene_object']
             gene_hierarchy = gene_info['hierarchy']
@@ -27,11 +27,11 @@
                 gene_hierarchy[gene_id])
             chrom = gene_obj.chrom
 
-            for mRNA_id, mRNA_info in gene_hierarchy[gene_id]['mRNAs'].items():
+            for mRNA_id, mRNA_info in list(gene_hierarchy[gene_id]['mRNAs'].items()):
                 mRNA = []
-                for exon_id, exon_info in gene_hierarchy[gene_id]['mRNAs']\
+                for exon_id, exon_info in list(gene_hierarchy[gene_id]['mRNAs']\
                     [mRNA_id]['exons'].\
-                    items():
+                    items()):
 
                     exon_rec = gene_hierarchy[gene_id]['mRNAs']\
                         [mRNA_id]['exons'][exon_id]['record']
--- src/MISO/misopy/pe_utils.py	(original)
+++ src/MISO/misopy/pe_utils.py	(refactored)
@@ -26,7 +26,7 @@
     Read insert length distribution as array of numbers.
     """
     insert_dist = []
-    for interval, paired_dists in interval_to_paired_dists.items():
+    for interval, paired_dists in list(interval_to_paired_dists.items()):
         insert_dist.extend(paired_dists)
     return array(insert_dist)
 
@@ -54,10 +54,10 @@
 
     min_cutoff = mu - (sd_max * sdev)
     max_cutoff = mu + (sd_max * sdev)
-    print("Excluding values < %.2f or > %.2f" \
-          %(min_cutoff, max_cutoff))
-
-    for interval, dists in interval_to_dists.items():
+    print(("Excluding values < %.2f or > %.2f" \
+          %(min_cutoff, max_cutoff)))
+
+    for interval, dists in list(interval_to_dists.items()):
         dists = array(dists)
         filtered_dists = delete(dists, nonzero(dists < min_cutoff)[0])
         filtered_dists = delete(filtered_dists,
@@ -69,7 +69,7 @@
 
 def load_insert_len(insert_dist_filename,
                     delim='\t'):
-    print("Loading insert length from: %s" %(insert_dist_filename))
+    print(("Loading insert length from: %s" %(insert_dist_filename)))
     insert_dist_file = open(insert_dist_filename, "r")
     insert_lens = []
     params_header = insert_dist_file.readline().strip()
@@ -102,7 +102,7 @@
     bedtools_cmd = "intersectBed -abam %s -b %s -wa -wb -bed -f 1" \
                    %(bam_filename, gff_intervals_filename)
 
-    print("Executing: %s" %(bedtools_cmd))
+    print(("Executing: %s" %(bedtools_cmd)))
 
     if (not os.path.isfile(bam_filename)) or \
        (not os.path.isfile(gff_intervals_filename)):
@@ -157,7 +157,7 @@
     interval_to_paired_dists = defaultdict(list)
     num_skipped = 0
     num_kept = 0
-    for read_id, read_pair in paired_reads.items():
+    for read_id, read_pair in list(paired_reads.items()):
         to_skip = False
         # Get the intervals that each read pair lands in
         # Consider here only the mate pairs that map to
@@ -208,15 +208,15 @@
         insert_len = right_end - left_start + 1
 
         if insert_len <= 0:
-            print("WARNING: 0 or negative insert length detected " \
-                  "in region %s." %(curr_gff_interval))
+            print(("WARNING: 0 or negative insert length detected " \
+                  "in region %s." %(curr_gff_interval)))
             continue
 
         interval_to_paired_dists[curr_gff_interval].append(insert_len)
         num_kept += 1
 
-    print("Used %d paired mates, threw out %d" \
-          %(num_kept, num_skipped))
+    print(("Used %d paired mates, threw out %d" \
+          %(num_kept, num_skipped)))
 
     return interval_to_paired_dists
 
@@ -238,14 +238,14 @@
     """
     bams_str = "\n  ".join(bams_to_process)
     num_bams = len(bams_to_process)
-    print("Computing insert length distribution of %d files:\n  %s" \
-          %(num_bams, bams_str))
-    print("  - Using const. exons from: %s" %(const_exons_gff_filename))
-    print("  - Outputting to: %s" %(output_dir))
-    print("  - Minimum exon size used: %d" %(min_exon_size))
+    print(("Computing insert length distribution of %d files:\n  %s" \
+          %(num_bams, bams_str)))
+    print(("  - Using const. exons from: %s" %(const_exons_gff_filename)))
+    print(("  - Outputting to: %s" %(output_dir)))
+    print(("  - Minimum exon size used: %d" %(min_exon_size)))
 
     if not os.path.isdir(output_dir):
-        print("Making directory: %s" %(output_dir))
+        print(("Making directory: %s" %(output_dir)))
         os.makedirs(output_dir)
 
     all_constitutive = True
@@ -269,7 +269,7 @@
                                        "%s.insert_len" \
                                        %(os.path.basename(bam_filename)))
         if not os.path.isfile(bam_filename):
-            print("Cannot find BAM file %s" %(bam_filename))
+            print(("Cannot find BAM file %s" %(bam_filename)))
             print("Quitting...")
             sys.exit(1)
         print("Fetching reads in constitutive exons")
@@ -289,17 +289,17 @@
         num_paired_reads = len(paired_reads)
 
         if num_paired_reads == 0:
-            print("WARNING: no paired mates in %s. Skipping...\n"\
+            print(("WARNING: no paired mates in %s. Skipping...\n"\
                   "Are you sure the read IDs match? If your BAM paired flags are "\
                   "unset, try using --no-bam-filter." \
-                  %(bam_filename))
+                  %(bam_filename)))
             continue
-        print("Using %d paired mates" %(num_paired_reads))
+        print(("Using %d paired mates" %(num_paired_reads)))
         interval_to_paired_dists = compute_inserts_from_paired_mates(paired_reads)
         summarize_insert_len_dist(interval_to_paired_dists, output_filename,
                                   sd_max=sd_max)
         t2 = time.time()
-        print("Insert length computation took %.2f seconds." %(t2 - t1))
+        print(("Insert length computation took %.2f seconds." %(t2 - t1)))
 
 
 # def pair_reads_from_bed_intervals(bed_stream):
@@ -411,7 +411,7 @@
     header = "#%s\t%s\n" %("region", "insert_len")
     output_file.write(header)
 
-    for region, insert_lens in interval_to_paired_dists.items():
+    for region, insert_lens in list(interval_to_paired_dists.items()):
         if len(insert_lens) == 0:
             continue
         str_lens = ",".join([str(l) for l in insert_lens])
@@ -450,12 +450,12 @@
     Summarize insert len distributions.
     """
     print("Summarizing insert length distribution..")
-    print("  - Output file: %s" %(output_filename))
+    print(("  - Output file: %s" %(output_filename)))
 
     output_file = open(output_filename, "w")
 
-    print("Removing values %d-many deviations outside the mean" \
-          %(sd_max))
+    print(("Removing values %d-many deviations outside the mean" \
+          %(sd_max)))
 
     # Filter insert length distribution based on sd_max
     filtered_interval_to_dist = filter_insert_len(interval_to_paired_dists,
@@ -473,12 +473,12 @@
         compute_insert_len_stats(filtered_insert_dist)
 
     print("mean\tsdev\tdispersion")
-    print("%.1f\t%.1f\t%.1f" \
-          %(mu, sdev, dispersion))
+    print(("%.1f\t%.1f\t%.1f" \
+          %(mu, sdev, dispersion)))
     min_insert = min(filtered_insert_dist)
     max_insert = max(filtered_insert_dist)
-    print("min insert: %d" %(min_insert))
-    print("max insert: %d" %(max_insert))
+    print(("min insert: %d" %(min_insert)))
+    print(("max insert: %d" %(max_insert)))
 
     # Write headers
     header_line = "#%s=%.1f,%s=%.1f,%s=%.1f,%s=%d\n" \
--- src/MISO/misopy/read_simulator.py	(original)
+++ src/MISO/misopy/read_simulator.py	(refactored)
@@ -25,9 +25,9 @@
                 if all(array(curr_read) == 1):
                     num_constitutive_reads += 1
         computed_const = True
-        print("Iso %d (len = %d): %d unambiguous supporting reads" %(n, gene.isoforms[n].len,
-                                                                     num_iso_reads))
-    print("No. constitutive reads (consistent with all): %d" %(num_constitutive_reads))
+        print(("Iso %d (len = %d): %d unambiguous supporting reads" %(n, gene.isoforms[n].len,
+                                                                     num_iso_reads)))
+    print(("No. constitutive reads (consistent with all): %d" %(num_constitutive_reads)))
 
 def get_reads_summary(reads):
     if reads.ndim != 2:
@@ -83,7 +83,7 @@
     num_NB = (gene.get_part_by_label('A').len - read_len + 1) + (gene.get_part_by_label('C').len - read_len + 1)
     p_NB = psi_f*((num_NB)/float(len(iso1_seq) - read_len + 1)) + \
            (1-psi_f)*(num_NB/float(len(iso2_seq) - read_len + 1))
-    print("p_NI: %.5f, p_NE: %.5f, p_NB: %.5f" %(p_NI, p_NE, p_NB))
+    print(("p_NI: %.5f, p_NE: %.5f, p_NB: %.5f" %(p_NI, p_NE, p_NB)))
     return [p_NI*num_reads, p_NE*num_reads, p_NB*num_reads, p_oh_violation*num_reads]
 
 def simulate_two_iso_reads(gene, true_psi, num_reads, read_len, overhang_len,
@@ -184,7 +184,7 @@
     pe_reads = reads[:, 0]
     frag_lens = reads[:, 1]
     num_reads = len(pe_reads)
-    print("Checking read consistency for %d reads..." %(num_reads))
+    print(("Checking read consistency for %d reads..." %(num_reads)))
     print(reads)
     is_consistent = False
     is_consistent = all(frag_lens[nonzero(pe_reads == 1)] != -Inf)
@@ -212,8 +212,8 @@
     else:
         r = -1 * (power(frag_mean, 2)/float(frag_mean - frag_variance))
         p = frag_mean / float(frag_variance)
-        print("Sampling frag_mean=",frag_mean, " frag_variance=", frag_variance)
-        print("r: ",r, "  p: ", p)
+        print(("Sampling frag_mean=",frag_mean, " frag_variance=", frag_variance))
+        print(("r: ",r, "  p: ", p))
         return negative_binomial(r, p)
 
 def compute_rpkc(list_read_counts, const_region_lens, read_len):
--- src/MISO/misopy/run_events_analysis.py	(original)
+++ src/MISO/misopy/run_events_analysis.py	(refactored)
@@ -40,10 +40,10 @@
     genes_gff_fname = os.path.join(gff_index_dir,
                                    "genes.gff")
     if not os.path.isfile(genes_gff_fname):
-        print("WARNING: Could not find \'genes.gff\' in %s - " \
+        print(("WARNING: Could not find \'genes.gff\' in %s - " \
               "skipping prefilter stage. Please reindex your " \
               "GFF file with the latest version to enable " \
-              "prefiltering." %(gff_index_dir))
+              "prefiltering." %(gff_index_dir)))
         return None
     print("Prefiltering reads...")
     coverage_fname = exon_utils.get_bam_gff_coverage(bam_filename,
@@ -63,8 +63,8 @@
                 continue
             attribs = gff_utils.parse_gff_attribs(fields[8])
             if "ID" not in attribs:
-                print("WARNING: No ID= found for line:\n%s\nSkipping..." \
-                    %(line))
+                print(("WARNING: No ID= found for line:\n%s\nSkipping..." \
+                    %(line)))
                 continue
             event_id = attribs["ID"]
             ids_passing_filter.append(event_id)
@@ -83,7 +83,7 @@
     print("Checking your GFF annotation and BAM for mismatches...")
     # Check that BAM exists
     if not os.path.isfile(bam_filename):
-        print("Error: BAM %s cannot be found." %(bam_filename))
+        print(("Error: BAM %s cannot be found." %(bam_filename)))
         return
     # Check that a BAM header is available
     bam_index_fname = "%s.bai" %(bam_filename)
@@ -114,7 +114,7 @@
         main_logger.warning(msg)
         time.sleep(5)
     else:
-        print("Found reads of length %d in BAM." %(all_seq_lens[0]))
+        print(("Found reads of length %d in BAM." %(all_seq_lens[0])))
         # Check the BAM read length against the read length that was
         # given
         if given_read_len != None:
@@ -186,7 +186,7 @@
         main_logger.warning("The first few BAM chromosomes were: %s" \
                             %(",".join(list(bam_chroms.keys()))))
         print("BAM references: ")
-        print(bam_file.references)
+        print((bam_file.references))
         main_logger.warning("The first few GFF chromosomes were: %s" \
                             %(",".join(list(gff_chroms.keys()))))
         main_logger.warning("Run is likely to fail or produce empty output. Proceeding " \
@@ -217,12 +217,12 @@
 
     misc_utils.make_dir(output_dir)
 
-    print("Computing Psi for events of type %s" %(event_type))
-    print("  - samples used: ", list(sample_filenames.keys()))
-
-    for sample_label, sample_filename in sample_filenames.items():
-        print("Processing sample: label=%s, filename=%s" \
-            %(sample_label, sample_filename))
+    print(("Computing Psi for events of type %s" %(event_type)))
+    print(("  - samples used: ", list(sample_filenames.keys())))
+
+    for sample_label, sample_filename in list(sample_filenames.items()):
+        print(("Processing sample: label=%s, filename=%s" \
+            %(sample_label, sample_filename)))
         results_output_dir = os.path.join(output_dir, sample_label)
         misc_utils.make_dir(results_output_dir)
 
@@ -237,7 +237,7 @@
             print("Filtering events...")
             events.filter_events(settings=Settings.get())
 
-        print("Running on a total of %d events." %(len(events.events)))
+        print(("Running on a total of %d events." %(len(events.events))))
 
         events_filename = events.output_file(results_output_dir,
                                              sample_label)
@@ -256,7 +256,7 @@
                 miso_cmd += ' --use-cluster --chunk-jobs %d' %(chunk_jobs)
             else:
                 miso_cmd += ' --use-cluster'
-        print("Executing: %s" %(miso_cmd))
+        print(("Executing: %s" %(miso_cmd)))
         if use_cluster:
             print(" - Using cluster")
         os.system(miso_cmd)
--- src/MISO/misopy/run_miso.py	(original)
+++ src/MISO/misopy/run_miso.py	(refactored)
@@ -51,19 +51,19 @@
     misc_utils.make_dir(output_dir)
 
     if not os.path.exists(gff_index_filename):
-        print("Error: No GFF %s" %(gff_index_filename))
+        print(("Error: No GFF %s" %(gff_index_filename)))
         return
 
     num_genes = len(gene_ids)
 
-    print("Computing Psi for %d genes..." %(num_genes))
-    print("  - " + ", ".join(gene_ids))
-    print("  - GFF filename: %s" %(gff_index_filename))
-    print("  - BAM: %s" %(bam_filename))
-    print("  - Outputting to: %s" %(output_dir))
+    print(("Computing Psi for %d genes..." %(num_genes)))
+    print(("  - " + ", ".join(gene_ids)))
+    print(("  - GFF filename: %s" %(gff_index_filename)))
+    print(("  - BAM: %s" %(bam_filename)))
+    print(("  - Outputting to: %s" %(output_dir)))
 
     if paired_end:
-        print("  - Paired-end mode: ", paired_end)
+        print(("  - Paired-end mode: ", paired_end))
 
     settings = Settings.get()
     settings_params = Settings.get_sampler_params()
@@ -102,7 +102,7 @@
     # Check if we're in compressed mode
     compressed_mode = misc_utils.is_compressed_index(gff_index_filename)
 
-    for gene_id, gene_info in gff_genes.items():
+    for gene_id, gene_info in list(gff_genes.items()):
         lookup_id = gene_id
         # Skip genes that we were not asked to run on
         if lookup_id not in gene_ids:
@@ -113,8 +113,8 @@
         # Sanity check: if the isoforms are all shorter than the read,
         # skip the event
         if all([l < read_len for l in gene_obj.iso_lens]):
-            print("All isoforms of %s shorter than %d, so skipping" \
-                  %(gene_id, read_len))
+            print(("All isoforms of %s shorter than %d, so skipping" \
+                  %(gene_id, read_len)))
             continue
 
         # Find the most inclusive transcription start and end sites
@@ -140,12 +140,12 @@
         # Skip gene if none of the reads align to gene boundaries
         if filter_reads:
             if num_raw_reads < min_event_reads:
-                print("Only %d reads in gene, skipping (needed >= %d reads)" \
+                print(("Only %d reads in gene, skipping (needed >= %d reads)" \
                       %(num_raw_reads,
-                        min_event_reads))
+                        min_event_reads)))
                 continue
             else:
-                print("%d raw reads in event" %(num_raw_reads))
+                print(("%d raw reads in event" %(num_raw_reads)))
 
         num_isoforms = len(gene_obj.isoforms)
         hyperparameters = ones(num_isoforms)
@@ -191,7 +191,7 @@
         # Pick .miso output filename based on the pickle filename
         miso_basename = os.path.basename(gff_index_filename)
         if not miso_basename.endswith(".pickle"):
-            print("Error: Invalid index file %s" %(gff_index_filename))
+            print(("Error: Invalid index file %s" %(gff_index_filename)))
             sys.exit(1)
         miso_basename = miso_basename.replace(".pickle", "")
         output_filename = os.path.join(chrom_dir, "%s" %(miso_basename))
@@ -228,17 +228,17 @@
     output_dir = \
         os.path.abspath(os.path.expanduser(options.compute_genes_from_file[2]))
     print("Computing Psi for genes from file...")
-    print("  - Input file: %s" %(genes_filename))
+    print(("  - Input file: %s" %(genes_filename)))
     if options.paired_end != None:
         paired_end = float(options.paired_end[0]), \
                      float(options.paired_end[1])
         print("  - Paired-end mode")
     # Check that the events filename exists
     if not os.path.isfile(genes_filename):
-        print("Error: %s filename does not exist." %(genes_filename))
+        print(("Error: %s filename does not exist." %(genes_filename)))
         sys.exit(1)
     if not os.path.isfile(bam_filename):
-        print("Error: BAM filename %s does not exist." %(bam_filename))
+        print(("Error: BAM filename %s does not exist." %(bam_filename)))
         sys.exit(1)
     # Load the events and their indexed GFF paths
     num_genes = 0
@@ -246,14 +246,14 @@
         for line in genes_in:
             gene_id, gff_filename = line.strip().split("\t")
             if not os.path.isfile(gff_filename):
-                print("Error: %s does not exist." %(gff_filename))
+                print(("Error: %s does not exist." %(gff_filename)))
                 sys.exit(1)
             compute_gene_psi([gene_id], gff_filename, bam_filename,
                              output_dir, options.read_len, overhang_len,
                              paired_end=paired_end,
                              event_type=options.event_type)
             num_genes += 1
-    print("Processed %d genes" %(num_genes))
+    print(("Processed %d genes" %(num_genes)))
 
 
 def run_compute_gene_psi(options):
@@ -408,8 +408,8 @@
         use_compressed = \
             os.path.abspath(os.path.expanduser(options.use_compressed))
         if not os.path.exists(use_compressed):
-            print("Error: mapping filename from event IDs to compressed IDs %s " \
-                  "is not found." %(use_compressed))
+            print(("Error: mapping filename from event IDs to compressed IDs %s " \
+                  "is not found." %(use_compressed)))
             sys.exit(1)
         else:
             print("Compression being used.")
@@ -419,7 +419,7 @@
         sample2_dirname = os.path.abspath(options.samples_to_compare[1])
         output_dirname = os.path.abspath(options.samples_to_compare[2])
         if not os.path.isdir(output_dirname):
-            print("Making comparisons directory: %s" %(output_dirname))
+            print(("Making comparisons directory: %s" %(output_dirname)))
             misc_utils.make_dir(output_dirname)
         ht.output_samples_comparison(sample1_dirname,
                                      sample2_dirname,
@@ -443,7 +443,7 @@
             os.path.abspath(os.path.expanduser(options.summarize_samples[0]))
         if options.summary_label != None:
             samples_label = options.summary_label
-            print("Using summary label: %s" %(samples_label))
+            print(("Using summary label: %s" %(samples_label)))
         else:
             samples_label = \
                 os.path.basename(os.path.expanduser(samples_dir))
@@ -462,29 +462,29 @@
     if options.view_gene != None:
         indexed_gene_filename = \
             os.path.abspath(os.path.expanduser(options.view_gene))
-        print("Viewing genes in %s" %(indexed_gene_filename))
+        print(("Viewing genes in %s" %(indexed_gene_filename)))
         gff_genes = gff_utils.load_indexed_gff_file(indexed_gene_filename)
 
         if gff_genes == None:
             print("No genes.")
             sys.exit(1)
 
-        for gene_id, gene_info in gff_genes.items():
-            print("Gene %s" %(gene_id))
+        for gene_id, gene_info in list(gff_genes.items()):
+            print(("Gene %s" %(gene_id)))
             gene_obj = gene_info['gene_object']
-            print(" - Gene object: ", gene_obj)
+            print((" - Gene object: ", gene_obj))
             print("==")
             print("Isoforms: ")
             for isoform in gene_obj.isoforms:
-                print(" - ", isoform)
+                print((" - ", isoform))
             print("==")
             print("mRNA IDs: ")
             for mRNA_id in gene_info['hierarchy'][gene_id]['mRNAs']:
-                print("%s" %(mRNA_id))
+                print(("%s" %(mRNA_id)))
             print("==")
             print("Exons: ")
             for exon in gene_obj.parts:
-                print(" - ", exon)
+                print((" - ", exon))
 
 if __name__ == '__main__':
     main()
--- src/MISO/misopy/sam_rpkm.py	(original)
+++ src/MISO/misopy/sam_rpkm.py	(refactored)
@@ -67,16 +67,16 @@
     Compute RPKMs for genes listed in GFF based on BAM reads.
     """
     print("Computing RPKMs...")
-    print("  - GFF filename: %s" %(gff_filename))
-    print("  - BAM filename: %s" %(bam_filename))
-    print("  - Output dir: %s" %(output_dir))
+    print(("  - GFF filename: %s" %(gff_filename)))
+    print(("  - BAM filename: %s" %(bam_filename)))
+    print(("  - Output dir: %s" %(output_dir)))
 
     if not os.path.isdir(output_dir):
         os.makedirs(output_dir)
 
     output_filename = os.path.join(output_dir,
                                    "%s.rpkm" %(os.path.basename(bam_filename)))
-    print("Outputting RPKMs to: %s" %(output_filename))
+    print(("Outputting RPKMs to: %s" %(output_filename)))
 
     rpkm_fieldnames = ['gene_id', 'rpkm', 'const_exon_lens',
                        'num_reads']
@@ -86,7 +86,7 @@
     t1 = time.time()
     gff_genes = load_genes_from_gff(gff_filename)
     t2 = time.time()
-    print("Parsing took %.2f seconds" %(t2 - t1))
+    print(("Parsing took %.2f seconds" %(t2 - t1)))
 
     # Load the BAM file
     bamfile = sam_utils.load_bam_reads(bam_filename)
@@ -95,9 +95,9 @@
     t1 = time.time()
     num_total_reads = count_total_reads(bam_filename)
     t2 = time.time()
-    print("Took: %.2f seconds" %(t2 - t1))
-
-    print("Number of total reads in BAM file: %d" %(num_total_reads))
+    print(("Took: %.2f seconds" %(t2 - t1)))
+
+    print(("Number of total reads in BAM file: %d" %(num_total_reads)))
 
     num_genes = 0
 
@@ -106,7 +106,7 @@
     exons_too_small = {}
     num_no_const = 0
 
-    for gene_id, gene_info in gff_genes.items():
+    for gene_id, gene_info in list(gff_genes.items()):
         # Get the gene object
         gene = gene_info['gene_object']
 
@@ -124,12 +124,12 @@
             chrom = gene.chrom
 
         if "random" in chrom:
-            print("Skipping random chromosome gene: %s, %s" \
-                  %(gene_id, chrom))
+            print(("Skipping random chromosome gene: %s, %s" \
+                  %(gene_id, chrom)))
             continue
 
         if len(const_exons) == 0:
-            print("Gene %s has no constitutive regions!" %(gene_id))
+            print(("Gene %s has no constitutive regions!" %(gene_id)))
             num_no_const += 1
             continue
 
@@ -143,9 +143,9 @@
             try:
                 reads = bamfile.fetch(chrom, exon.start, exon.end)
             except ValueError:
-                print("Error fetching region: %s:%d-%d" %(chrom,
+                print(("Error fetching region: %s:%d-%d" %(chrom,
                                                           exon.start,
-                                                          exon.end))
+                                                          exon.end)))
                 break
 
             # Count reads landing in exon
@@ -196,14 +196,14 @@
 
     num_too_small = len(list(exons_too_small.keys()))
 
-    print("Computed RPKMs for %d genes." %(num_genes))
-    print("  - Total of %d genes cannot be used because they lack const. regions." \
-          %(num_no_const))
-    print("  - Total of %d genes cannot be used since their exons are too small." \
-          %(num_too_small))
-    for gene, total_counts in exons_too_small.items():
+    print(("Computed RPKMs for %d genes." %(num_genes)))
+    print(("  - Total of %d genes cannot be used because they lack const. regions." \
+          %(num_no_const)))
+    print(("  - Total of %d genes cannot be used since their exons are too small." \
+          %(num_too_small)))
+    for gene, total_counts in list(exons_too_small.items()):
         print("      gene_id\ttotal_counts")
-        print("    * %s\t%d" %(gene, total_counts))
+        print(("    * %s\t%d" %(gene, total_counts)))
 
     # Output RPKMs to file
     dictlist2file(rpkms_dictlist, output_filename,
--- src/MISO/misopy/sam_to_bam.py	(original)
+++ src/MISO/misopy/sam_to_bam.py	(refactored)
@@ -19,7 +19,7 @@
     if header_ref != None:
         cmd += " -t %s" %(header_ref)
     cmd += " > %s" %(bam_filename)
-    print("  - Executing: %s" %(cmd))
+    print(("  - Executing: %s" %(cmd)))
     os.system(cmd)
 
     # Sort
@@ -27,18 +27,18 @@
     sorted_filename = "%s.sorted" %(bam_filename.split(".bam")[0])
     cmd = "samtools sort %s %s" %(bam_filename,
                                   sorted_filename)
-    print("  - Executing: %s" %(cmd))
+    print(("  - Executing: %s" %(cmd)))
     os.system(cmd)
 
     # Index
     final_filename = "%s.bam" %(sorted_filename)
     print("Indexing BAM...")
     cmd = "samtools index %s" %(final_filename)
-    print("  - Executing: %s" %(cmd))
+    print(("  - Executing: %s" %(cmd)))
     os.system(cmd)
 
     t2 = time.time()
-    print("Conversion took %.2f minutes." %((t2 - t1)/60.))
+    print(("Conversion took %.2f minutes." %((t2 - t1)/60.)))
 
 def main():
     from optparse import OptionParser
@@ -55,7 +55,7 @@
 
         if options.ref != None:
             ref = os.path.abspath(os.path.expanduser(options.ref))
-            print("Using ref: %s" %(ref))
+            print(("Using ref: %s" %(ref)))
 
         sam_filename = os.path.abspath(os.path.expanduser(options.convert[0]))
         output_dir = os.path.abspath(os.path.expanduser(options.convert[1]))
--- src/MISO/misopy/sam_utils.py	(original)
+++ src/MISO/misopy/sam_utils.py	(refactored)
@@ -144,7 +144,7 @@
     """
     Load a set of indexed BAM reads.
     """
-    print("Loading BAM filename from: %s" %(bam_filename))
+    print(("Loading BAM filename from: %s" %(bam_filename)))
     bam_filename = os.path.abspath(os.path.expanduser(bam_filename))
     bamfile = pysam.Samfile(bam_filename, "rb",
                             template=template)
@@ -170,13 +170,13 @@
     try:
         gene_reads = bamfile.fetch(chrom, start, end)
     except ValueError:
-        print("Cannot fetch reads in region: %s:%d-%d" %(chrom,
+        print(("Cannot fetch reads in region: %s:%d-%d" %(chrom,
                                                          start,
-                                                         end))
+                                                         end)))
     except AssertionError:
-        print("AssertionError in region: %s:%d-%d" %(chrom,
+        print(("AssertionError in region: %s:%d-%d" %(chrom,
                                                      start,
-                                                     end))
+                                                     end)))
         print("  - Check that your BAM file is indexed!")
     return gene_reads
 
@@ -250,7 +250,7 @@
     num_unpaired = 0
     num_total = 0
 
-    for read_name, read in paired_reads.items():
+    for read_name, read in list(paired_reads.items()):
         if len(read) != 2:
             unpaired_reads[read_name] = read
             num_unpaired += 1
@@ -269,19 +269,19 @@
             continue
 
         if left_read.pos > right_read.pos:
-            print("WARNING: %s left mate starts later than right "\
-                  "mate" %(left_read.qname))
+            print(("WARNING: %s left mate starts later than right "\
+                  "mate" %(left_read.qname)))
         num_total += 1
 
     # Delete reads that are on the same strand
     for del_key in to_delete:
         del paired_reads[del_key]
 
-    print("Filtered out %d read pairs that were on same strand." \
-        %(len(to_delete)))
-    print("Filtered out %d reads that had no paired mate." \
-        %(num_unpaired))
-    print("  - Total read pairs: %d" %(num_total))
+    print(("Filtered out %d read pairs that were on same strand." \
+        %(len(to_delete))))
+    print(("Filtered out %d reads that had no paired mate." \
+        %(num_unpaired)))
+    print(("  - Total read pairs: %d" %(num_total)))
 
     if not return_unpaired:
         return paired_reads
@@ -398,7 +398,7 @@
         # Process reads into format required by fastmiso
         # MISO C engine requires pairs to follow each other in order.
         # Unpaired reads are not supported.
-        for read_id, read_info in paired_reads.items():
+        for read_id, read_info in list(paired_reads.items()):
             if check_strand:
                 # Check strand
                 if not read_matches_strand(read_info,
@@ -447,8 +447,8 @@
             num_reads += 1
 
     if check_strand:
-        print("No. reads discarded due to strand violation: %d" \
-            %(num_strand_discarded))
+        print(("No. reads discarded due to strand violation: %d" \
+            %(num_strand_discarded)))
 
     reads = (tuple(read_positions),
              tuple(read_cigars))
@@ -471,7 +471,7 @@
 
     k = 0
 
-    for read_id, read_pair in paired_reads.items():
+    for read_id, read_pair in list(paired_reads.items()):
         if len(read_pair) != 2:
             # Skip reads with no pair
             continue
@@ -487,7 +487,7 @@
 #            print "read %s inconsistent with all isoforms" %(read_id)
             k += 1
 
-    print("Filtered out %d reads that were not consistent with any isoform" %(k))
+    print(("Filtered out %d reads that were not consistent with any isoform" %(k)))
     return pe_reads, num_read_pairs
 
 
@@ -512,7 +512,7 @@
         else:
             num_skipped += 1
 
-    print("Skipped total of %d reads." %(num_skipped))
+    print(("Skipped total of %d reads." %(num_skipped)))
 
     return alignments, num_reads
 
@@ -535,8 +535,8 @@
                                                     overhang_len)
 
     t2 = time.time()
-    print("Alignment to gene took %.2f seconds (%d reads)." %((t2 - t1),
-                                                              num_reads))
+    print(("Alignment to gene took %.2f seconds (%d reads)." %((t2 - t1),
+                                                              num_reads)))
     return reads
 
 
--- src/MISO/misopy/samples_utils.py	(original)
+++ src/MISO/misopy/samples_utils.py	(refactored)
@@ -31,8 +31,8 @@
         self.compressed_ids_fname = use_compressed
         self.compressed_ids_to_genes = None
         if self.compressed_ids_fname is not None:
-            print("  - Loading compressed IDs mapping from: %s" \
-                  %(self.compressed_ids_fname))
+            print(("  - Loading compressed IDs mapping from: %s" \
+                  %(self.compressed_ids_fname)))
             # Load mapping from gene IDs to their hashes
             self.compressed_ids_to_genes = \
               misc_utils.load_compressed_ids_to_genes(self.compressed_ids_fname)
@@ -116,7 +116,7 @@
             event_data = curr_db.get_event_data_as_stream(event_name)
             samples = load_samples(event_data)
         if samples is None:
-            print("WARNING: Could not parse event %s samples" %(event_name))
+            print(("WARNING: Could not parse event %s samples" %(event_name)))
         return samples
 
 
@@ -203,8 +203,8 @@
             counts['assigned_counts'] = f.split("=")[1]
 
     if len(list(counts.keys())) != 2:
-        print("Warning: Could not get counts fields out of " \
-              "%s header." %(samples_header))
+        print(("Warning: Could not get counts fields out of " \
+              "%s header." %(samples_header)))
         counts = {'counts': 'n/a',
                   'assigned_counts': 'n/a'}
 
@@ -242,7 +242,7 @@
     event_name = basename.split(".miso")[0]
     if use_compressed_map is not None:
         if event_name not in use_compressed_map:
-            print("MISO FILENAME IS: %s" %(miso_filename))
+            print(("MISO FILENAME IS: %s" %(miso_filename)))
             print(event_name)
         else:
             event_name = use_compressed_map[event_name]
@@ -275,8 +275,8 @@
                      "mRNA_ends"]
     summary_header = "%s\n" %("\t".join(header_fields))
     summary_file.write(summary_header)
-    print("Loading events from: %s" %(samples_dir))
-    print("Writing summary to: %s" %(summary_filename))
+    print(("Loading events from: %s" %(samples_dir)))
+    print(("Writing summary to: %s" %(summary_filename)))
     samples_obj = MISOSamples(samples_dir,
                               use_compressed=use_compressed)
     num_events = 0
@@ -284,16 +284,16 @@
     for event_name in samples_obj.all_event_names:
         samples_results = samples_obj.get_event_samples(event_name)
         if samples_results is None:
-            print("WARNING: Skipping %s" %(event_name))
+            print(("WARNING: Skipping %s" %(event_name)))
             # Skip files that could not be parsed
             continue
         # If we're not given a mapping to compressed IDs, check
         # that the event IDs do not look compressed
         if misc_utils.is_compressed_name(event_name) and \
            (use_compressed is None):
-            print("WARNING: %s looks like a compressed id, but no mapping file " \
+            print(("WARNING: %s looks like a compressed id, but no mapping file " \
                   "from compressed IDs to event IDs was given! Try: --use-compressed" \
-                  %(event_name))
+                  %(event_name)))
         # Load header/parameters information
         samples = samples_results[0]
         header = samples_results[1]
@@ -303,7 +303,7 @@
         counts_info = samples_results[5]
         shape_len = len(shape(samples))
         if shape_len < 2:
-            print("WARNING: Skipping %s -- mishaped file" %(event_name))
+            print(("WARNING: Skipping %s -- mishaped file" %(event_name)))
             continue
         num_samples, num_isoforms = shape(samples)
         output_fields = format_credible_intervals(event_name, samples)
@@ -325,7 +325,7 @@
         output_line = "%s\n" %("\t".join(output_fields))
         summary_file.write(output_line)
         num_events += 1
-    print("  - Summarized a total of %d events." %(num_events))
+    print(("  - Summarized a total of %d events." %(num_events)))
     summary_file.close()
 
 
@@ -402,7 +402,7 @@
       list(filter(miso_db.is_miso_db_fname,
              filenames))
     if len(miso_filenames) > 0 and len(miso_db_filenames) > 0:
-        print("WARNING: Directory %s has both *.miso and *.miso_db files" \
-              %(samples_dir))
+        print(("WARNING: Directory %s has both *.miso and *.miso_db files" \
+              %(samples_dir)))
     relevant_filenames = miso_filenames + miso_db_filenames
     return relevant_filenames
--- src/MISO/misopy/settings.py	(original)
+++ src/MISO/misopy/settings.py	(refactored)
@@ -28,10 +28,10 @@
                                              "settings",
                                              "miso_settings.txt")
 
-        print("Using MISO settings file: %s" %(cls.settings_path))
+        print(("Using MISO settings file: %s" %(cls.settings_path)))
         if not os.path.isfile(cls.settings_path):
-            print("Error: Settings file %s does not exist." \
-                %(cls.settings_path))
+            print(("Error: Settings file %s does not exist." \
+                %(cls.settings_path)))
             sys.exit(1)
         cls.parsed_settings = config.read(cls.settings_path)
 
@@ -138,8 +138,8 @@
             if not ((strandedness == "fr-unstranded") or \
                     (strandedness == "fr-firststrand") or \
                     (strandedness == "fr-secondstrand")):
-                print("Error: Invalid strand parameter %s" \
-                    %(strandedness))
+                print(("Error: Invalid strand parameter %s" \
+                    %(strandedness)))
                 sys.exit(1)
         return strandedness
 
--- src/MISO/misopy/summarize_miso.py	(original)
+++ src/MISO/misopy/summarize_miso.py	(refactored)
@@ -61,8 +61,8 @@
         use_compressed = \
             os.path.abspath(os.path.expanduser(options.use_compressed))
         if not os.path.exists(use_compressed):
-            print("Error: mapping filename from event IDs to compressed IDs %s " \
-                  "is not found." %(use_compressed))
+            print(("Error: mapping filename from event IDs to compressed IDs %s " \
+                  "is not found." %(use_compressed)))
             sys.exit(1)
         else:
             print("Compression being used.")
@@ -75,7 +75,7 @@
             os.path.abspath(os.path.expanduser(options.summarize_samples[0]))
         if options.summary_label != None:
             samples_label = options.summary_label
-            print("Using summary label: %s" %(samples_label))
+            print(("Using summary label: %s" %(samples_label)))
         else:
             samples_label = \
                 os.path.basename(os.path.expanduser(samples_dir))
--- src/MISO/misopy/test_cluster.py	(original)
+++ src/MISO/misopy/test_cluster.py	(refactored)
@@ -51,7 +51,7 @@
                                                        read_len,
                                                        overhang_len,
                                                        event_type)
-        print("Executing: %s" %(miso_cmd))
+        print(("Executing: %s" %(miso_cmd)))
         os.system(miso_cmd)
 
     def test_cluster_gene_psi(self):
@@ -73,7 +73,7 @@
                                                 gff_filename,
                                                 gff_index_dir)
 
-        print("Executing: %s" %(index_cmd))
+        print(("Executing: %s" %(index_cmd)))
         os.system(index_cmd)
 
         output_dir = os.path.join(self.tests_output_dir, "gene-psi-output")
@@ -87,7 +87,7 @@
                      read_len,
                      insert_mean,
                      insert_sd)
-        print("Executing: %s" %(miso_cmd))
+        print(("Executing: %s" %(miso_cmd)))
         os.system(miso_cmd)
 
 
--- src/MISO/misopy/test_miso.py	(original)
+++ src/MISO/misopy/test_miso.py	(refactored)
@@ -43,7 +43,7 @@
             "%s --convert %s %s" %(self.sam_to_bam_script,
                                    self.test_sam_filename,
                                    output_dir)
-        print("Executing: %s" %(sam_to_bam_cmd))
+        print(("Executing: %s" %(sam_to_bam_cmd)))
         os.system(sam_to_bam_cmd)
 
         # Make sure conversion worked; sorted, indexed BAM file is outputted
@@ -88,7 +88,7 @@
         print("Testing fr-unstranded...")
         for curr_read in [f_read, r_read]:
             for target in [plus_target_strand, minus_target_strand]:
-                print("Checking read ", curr_read.qname, " against ", target)
+                print(("Checking read ", curr_read.qname, " against ", target))
                 assert(sam_utils.read_matches_strand(curr_read,
                                                      target,
                                                      "fr-unstranded") == True), \
@@ -152,12 +152,12 @@
                                      "genes",
                                      "Atp2b1",
                                      "indexed")
-        print("Testing GFF indexing of: %s" %(gff_filename))
+        print(("Testing GFF indexing of: %s" %(gff_filename)))
         index_cmd = "%s --index %s %s" %(self.index_gff_script,
                                          gff_filename,
                                          gff_index_dir)
 
-        print("Executing: %s" %(index_cmd))
+        print(("Executing: %s" %(index_cmd)))
         os.system(index_cmd)
 
         output_dir = os.path.join(self.tests_output_dir,
@@ -168,7 +168,7 @@
                      bam_filename,
                      output_dir,
                      read_len)
-        print("Executing: %s" %(miso_cmd))
+        print(("Executing: %s" %(miso_cmd)))
         os.system(miso_cmd)
 
 def main():
--- src/MISO/misopy/sashimi_plot/Sashimi.py	(original)
+++ src/MISO/misopy/sashimi_plot/Sashimi.py	(refactored)
@@ -56,8 +56,8 @@
             fig_height = self.settings["fig_height"]
             fig_width = self.settings["fig_width"]
             print("Reading dimensions from settings...")
-            print(" - Height: %.2f" %(float(fig_height)))
-            print(" - Width: %.2f" %(float(fig_width)))
+            print((" - Height: %.2f" %(float(fig_height))))
+            print((" - Width: %.2f" %(float(fig_width))))
             self.dimensions = [fig_width, fig_height]
 
 
@@ -69,7 +69,7 @@
         self.output_filename = os.path.join(self.output_dir, plot_basename)
 
     def setup_figure(self):
-        print("Setting up plot using dimensions: ", self.dimensions)
+        print(("Setting up plot using dimensions: ", self.dimensions))
         plt.figure(figsize=self.dimensions)
 
         # If asked, use sans serif fonts
@@ -94,5 +94,5 @@
                 os.path.dirname(dirname, "%s.%s" %(plot_label, ext))
         else:
             output_fname = self.output_filename
-        print("Saving plot to: %s" %(output_fname))
+        print(("Saving plot to: %s" %(output_fname)))
         plt.savefig(output_fname)
--- src/MISO/misopy/sashimi_plot/sashimi_plot.py	(original)
+++ src/MISO/misopy/sashimi_plot/sashimi_plot.py	(refactored)
@@ -43,8 +43,8 @@
     Plot a Bayes factor distribution from a .miso_bf file.
     """
     if not bf_filename.endswith(".miso_bf"):
-        print("WARNING: %s does not end in .miso_bf, are you sure it is the " \
-              "output of a MISO samples comparison?" %(bf_filename))
+        print(("WARNING: %s does not end in .miso_bf, are you sure it is the " \
+              "output of a MISO samples comparison?" %(bf_filename)))
 
     # Load BF data
     data, h = csv2dictlist_raw(bf_filename)
@@ -64,8 +64,8 @@
         delta_psi = event['diff']
 
         if type(bf) == str and "," in bf:
-            print("WARNING: %s is a multi-isoform event, skipping..." \
-                %(event))
+            print(("WARNING: %s is a multi-isoform event, skipping..." \
+                %(event)))
             continue
         else:
             # Impose upper limit on Bayes factor
@@ -77,12 +77,12 @@
     bfs_and_deltas = array(bfs_and_deltas)
     num_events = len(bfs_and_deltas)
 
-    print("Loaded %d event comparisons." %(num_events))
+    print(("Loaded %d event comparisons." %(num_events)))
 
     output_filename = sashimi_obj.output_filename
 
     print("Plotting Bayes factors distribution")
-    print("  - Output filename: %s" %(output_filename))
+    print(("  - Output filename: %s" %(output_filename)))
     bf_thresholds = settings["bf_thresholds"]
     bar_color = settings["bar_color"]
 
@@ -94,7 +94,7 @@
             sys.exit(1)
     print("Using BF thresholds: ")
     print(bf_thresholds)
-    print("Using bar color: %s" %(bar_color))
+    print(("Using bar color: %s" %(bar_color)))
     plot_cumulative_bars(bfs_and_deltas[:, 0],
                          bf_thresholds,
                          bar_color=bar_color,
@@ -124,11 +124,11 @@
     Also plots MISO estimates and Psi values.
     """
     if not os.path.isfile(settings_filename):
-        print("Error: settings filename %s not found." %(settings_filename))
+        print(("Error: settings filename %s not found." %(settings_filename)))
         sys.exit(1)
 
     if not os.path.isdir(pickle_dir):
-        print("Error: event pickle directory %s not found." %(pickle_dir))
+        print(("Error: event pickle directory %s not found." %(pickle_dir)))
         sys.exit(1)
 
     # Retrieve the full pickle filename
@@ -167,7 +167,7 @@
     Plot insert length distribution.
     """
     if not os.path.isfile(settings_filename):
-        print("Error: settings filename %s not found." %(settings_filename))
+        print(("Error: settings filename %s not found." %(settings_filename)))
         sys.exit(1)
     plot_name = os.path.basename(insert_len_filename)
     sashimi_obj = Sashimi(plot_name, output_dir,
@@ -179,15 +179,15 @@
     s = plt.subplot(1, 1, 1)
 
     print("Plotting insert length distribution...")
-    print("  - Distribution file: %s" %(insert_len_filename))
-    print("  - Output plot: %s" %(output_filename))
+    print(("  - Distribution file: %s" %(insert_len_filename)))
+    print(("  - Output plot: %s" %(output_filename)))
 
     insert_dist, params = pe_utils.load_insert_len(insert_len_filename)
 
     mean, sdev, dispersion, num_pairs \
           = pe_utils.compute_insert_len_stats(insert_dist)
-    print("min insert: %.1f" %(min(insert_dist)))
-    print("max insert: %.1f" %(max(insert_dist)))
+    print(("min insert: %.1f" %(min(insert_dist))))
+    print(("max insert: %.1f" %(max(insert_dist))))
     plt.title("%s (%d read-pairs)" \
               %(plot_name,
                 num_pairs),
--- src/MISO/misopy/sashimi_plot/plot_utils/plot_gene.py	(original)
+++ src/MISO/misopy/sashimi_plot/plot_utils/plot_gene.py	(refactored)
@@ -57,8 +57,8 @@
         try:
             subset_reads = bamfile.fetch(reference=chrom, start=tx_start,end=tx_end)
         except ValueError as e:
-            print("Error retrieving files from %s: %s" %(chrom, str(e)))
-            print("Are you sure %s appears in your BAM file?" %(chrom))
+            print(("Error retrieving files from %s: %s" %(chrom, str(e))))
+            print(("Are you sure %s appears in your BAM file?" %(chrom)))
             print("Aborting plot...")
             return axvar
         # wiggle, jxns = readsToWiggle_pysam(subset_reads, tx_start, tx_end)
@@ -312,8 +312,8 @@
     show_xlabel = settings["show_xlabel"]
     if plot_title is None:
         plot_title = event
-    print("Using intron scale ", intron_scale)
-    print("Using exon scale ", exon_scale)
+    print(("Using intron scale ", intron_scale))
+    print(("Using exon scale ", exon_scale))
 
     # Always show y-axis for read densities for now
     showYaxis = True
@@ -380,7 +380,7 @@
         # Read sample label
         sample_label = settings["sample_labels"][i]
 
-        print("Reading sample label: %s" %(sample_label))
+        print(("Reading sample label: %s" %(sample_label)))
         # print "Processing BAM: %s" %(bam_file)
 
         plotted_ax, maxy = plot_density_single(settings, sample_label,
@@ -404,9 +404,9 @@
                     (i, gene_posterior_ratio - 1))
 
                 if not os.path.isfile(miso_file):
-                    print("Warning: MISO file %s not found" %(miso_file))
-
-                print("Loading MISO file: %s" %(miso_file))
+                    print(("Warning: MISO file %s not found" %(miso_file)))
+
+                print(("Loading MISO file: %s" %(miso_file)))
                 plot_posterior_single(miso_file, ax2, posterior_bins,
                                       showXaxis=showXaxis, show_ylabel=False,
                                       font_size=font_size,
@@ -545,7 +545,7 @@
     for read in reads:
         # Skip reads with no CIGAR string
         if read.cigar is None:
-            print("Skipping read with no CIGAR string: %s" %(read.cigar))
+            print(("Skipping read with no CIGAR string: %s" %(read.cigar)))
             continue
         cigar_str = sam_utils.sam_cigar_to_str(read.cigar)
 
@@ -560,8 +560,8 @@
         for cigar_part in read.cigar:
             if cigar_part[0] == 1 or \
                cigar_part[0] == 2:
-                print("Skipping read with CIGAR %s" \
-                      %(cigar_str))
+                print(("Skipping read with CIGAR %s" \
+                      %(cigar_str)))
                 skipit = True
         if skipit:
             continue
@@ -777,7 +777,7 @@
     axis_color = "k"
     for shown_axis in axes_to_show:
         if shown_axis in axvar.spines:
-            print("Setting color on %s axis" %(shown_axis))
+            print(("Setting color on %s axis" %(shown_axis)))
             axvar.spines[shown_axis].set_linewidth(axis_size)
             axvar.xaxis.set_tick_params(size=tick_size,
                                         color=axis_color)
@@ -831,7 +831,7 @@
                           no_posteriors=no_posteriors)
 
     print("Plotting read densities and MISO estimates along event...")
-    print("  - Event: %s" %(event))
+    print(("  - Event: %s" %(event)))
 
     settings = sashimi_obj.settings
     if no_posteriors:
--- src/MISO/misopy/sashimi_plot/plot_utils/plot_settings.py	(original)
+++ src/MISO/misopy/sashimi_plot/plot_utils/plot_settings.py	(refactored)
@@ -86,12 +86,12 @@
 
     config = configparser.ConfigParser()
 
-    print("Reading settings from: %s" %(settings_filename))
+    print(("Reading settings from: %s" %(settings_filename)))
     config.read(settings_filename)
 
     for section in config.sections():
         for option in config.options(section):
-            print("Parsing %s:%s" %(section, option))
+            print(("Parsing %s:%s" %(section, option)))
             if option in FLOAT_PARAMS:
                 settings[option] = config.getfloat(section, option)
             elif option in INT_PARAMS:
@@ -130,8 +130,8 @@
     if not (num_labels == num_bams == num_colors) and not(settings["group_info"]):
         print('\033[0;31;m')  # change the print color as red
         print("Error: Must provide sample label and color for each entry in bam_files!")
-        print("  - Provided %d labels, %d BAMs, %d colors" \
-            %(num_labels, num_bams, num_colors))
+        print(("  - Provided %d labels, %d BAMs, %d colors" \
+            %(num_labels, num_bams, num_colors)))
         print('\033[0m')  # set the color as default value
         sys.exit(1)
 
--- src/MISO/misopy/sashimi_plot/plot_utils/plotting.py	(original)
+++ src/MISO/misopy/sashimi_plot/plot_utils/plotting.py	(refactored)
@@ -93,7 +93,7 @@
 
 
 def show_spines(ax,spines):
-    for loc, spine in ax.spines.items():
+    for loc, spine in list(ax.spines.items()):
         if loc not in spines:
             spine.set_color('none') # don't draw spine
 
--- src/MISO/misopy/sashimi_plot/plot_utils/samples_plotter.py	(original)
+++ src/MISO/misopy/sashimi_plot/plot_utils/samples_plotter.py	(refactored)
@@ -121,7 +121,7 @@
         # Normalize samples
         if normed:
             yticks = list(plt.gca().get_yticks())
-            print("yticks: ", yticks)
+            print(("yticks: ", yticks))
             ytick_labels = ["%.2f" %(float(ytick) / float(normed)) for ytick in yticks]
             ax.set_yticklabels(ytick_labels)
 #            samples_to_plot = samples_to_plot / float(len(samples_to_plot))
